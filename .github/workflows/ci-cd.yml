name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: read

jobs:
  test-macos:
    name: Test & Build (macOS)
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: '5.9'

      - name: Cache Swift dependencies
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'Scripts/requirements.txt'

      - name: Install Python dependencies
        run: |
          cd Scripts
          pip install -r requirements.txt

      - name: Verify generated code is up to date
        run: |
          cd Scripts
          bash codegen.sh
          cd ..
          if ! git diff --quiet; then
            echo "❌ Generated code is out of date. Please run 'cd Scripts && bash codegen.sh' locally and commit the changes."
            git diff
            exit 1
          fi
          echo "✅ Generated code is up to date"

      - name: Swift Package Resolve
        run: swift package resolve

      - name: Build Swift Package
        run: swift build

      - name: Run Swift Tests
        run: swift test --enable-code-coverage

      - name: Generate coverage report
        run: |
          xcrun llvm-cov export -format="lcov" \
            .build/debug/NearJsonRpcPackageTests.xctest/Contents/MacOS/NearJsonRpcPackageTests \
            -instr-profile .build/debug/codecov/default.profdata > coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.lcov
          fail_ci_if_error: false

  test-linux:
    name: Test & Build (Linux)
    runs-on: ubuntu-latest
    container:
      image: swift:5.9

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Swift dependencies
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Install Python
        run: |
          apt-get update
          apt-get install -y python3 python3-pip

      - name: Install Python dependencies
        run: |
          cd Scripts
          pip3 install -r requirements.txt

      - name: Swift Package Resolve
        run: swift package resolve

      - name: Build Swift Package
        run: swift build

      - name: Run Swift Tests
        run: swift test

  validate-package:
    name: Validate Swift Package
    runs-on: macos-latest
    if: github.event_name == 'pull_request'
    needs: [test-macos, test-linux]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Swift
        uses: swift-actions/setup-swift@v2
        with:
          swift-version: '5.9'

      - name: Validate Swift Package Structure
        run: |
          echo "📦 Validating Swift Package..."
          swift package dump-package
          echo "✅ Package structure is valid"

      - name: Check for Package.swift warnings
        run: |
          swift package diagnose
