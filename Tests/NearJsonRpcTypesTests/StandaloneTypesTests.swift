//
// StandaloneTypesTests.swift
// Auto-generated tests for standalone NEAR JSON-RPC Types
//
// DO NOT EDIT: This file is auto-generated by generate_all_tests.py
//

import Testing
import Foundation
@testable import NearJsonRpcTypes

@Suite("Standalone Type Tests for Coverage")
struct StandaloneTypesTests {
    
    let decoder: JSONDecoder
    let encoder: JSONEncoder
    
    init() {
        decoder = JSONDecoder()
        decoder.keyDecodingStrategy = .convertFromSnakeCase
        
        encoder = JSONEncoder()
        encoder.keyEncodingStrategy = .convertToSnakeCase
        encoder.outputFormatting = [.prettyPrinted, .sortedKeys]
    }
    
    /// Load mock JSON data from file
    func loadMockJSON(_ filename: String) throws -> Data {
        let testBundle = Bundle.module
        guard let url = testBundle.url(forResource: filename.replacingOccurrences(of: ".json", with: ""), withExtension: "json", subdirectory: "Mock") else {
            throw NSError(domain: "TestError", code: 1, userInfo: [NSLocalizedDescriptionKey: "Mock file not found: \(filename)"])
        }
        return try Data(contentsOf: url)
    }
    
    @Test("AccessKey can be decoded from mock and re-encoded")
    func testAccessKeyDecodingAndEncoding() throws {
        let data = try loadMockJSON("AccessKey.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccessKey.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccessKey.self, from: encoded)
    }
    
    @Test("AccessKeyCreationConfigView can be decoded from mock and re-encoded")
    func testAccessKeyCreationConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("AccessKeyCreationConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccessKeyCreationConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccessKeyCreationConfigView.self, from: encoded)
    }
    
    @Test("AccessKeyInfoView can be decoded from mock and re-encoded")
    func testAccessKeyInfoViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("AccessKeyInfoView.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccessKeyInfoView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccessKeyInfoView.self, from: encoded)
    }
    
    @Test("AccessKeyList can be decoded from mock and re-encoded")
    func testAccessKeyListDecodingAndEncoding() throws {
        let data = try loadMockJSON("AccessKeyList.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccessKeyList.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccessKeyList.self, from: encoded)
    }
    
    @Test("AccessKeyPermission variant 0 can be decoded and re-encoded")
    func testAccessKeyPermissionVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("AccessKeyPermission_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccessKeyPermission.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccessKeyPermission.self, from: encoded)
    }
    
    @Test("AccessKeyPermission variant 1 can be decoded and re-encoded")
    func testAccessKeyPermissionVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("AccessKeyPermission_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccessKeyPermission.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccessKeyPermission.self, from: encoded)
    }
    
    @Test("AccessKeyPermissionView variant 0 can be decoded and re-encoded")
    func testAccessKeyPermissionViewVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("AccessKeyPermissionView_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccessKeyPermissionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccessKeyPermissionView.self, from: encoded)
    }
    
    @Test("AccessKeyPermissionView variant 1 can be decoded and re-encoded")
    func testAccessKeyPermissionViewVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("AccessKeyPermissionView_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccessKeyPermissionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccessKeyPermissionView.self, from: encoded)
    }
    
    @Test("AccessKeyView can be decoded from mock and re-encoded")
    func testAccessKeyViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("AccessKeyView.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccessKeyView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccessKeyView.self, from: encoded)
    }
    
    @Test("AccountCreationConfigView can be decoded from mock and re-encoded")
    func testAccountCreationConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("AccountCreationConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccountCreationConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccountCreationConfigView.self, from: encoded)
    }
    
    @Test("AccountDataView can be decoded from mock and re-encoded")
    func testAccountDataViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("AccountDataView.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccountDataView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccountDataView.self, from: encoded)
    }
    
    @Test("AccountInfo can be decoded from mock and re-encoded")
    func testAccountInfoDecodingAndEncoding() throws {
        let data = try loadMockJSON("AccountInfo.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccountInfo.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccountInfo.self, from: encoded)
    }
    
    @Test("AccountView can be decoded from mock and re-encoded")
    func testAccountViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("AccountView.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccountView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccountView.self, from: encoded)
    }
    
    @Test("AccountWithPublicKey can be decoded from mock and re-encoded")
    func testAccountWithPublicKeyDecodingAndEncoding() throws {
        let data = try loadMockJSON("AccountWithPublicKey.json")
        
        // Test decoding
        let decoded = try decoder.decode(AccountWithPublicKey.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AccountWithPublicKey.self, from: encoded)
    }
    
    @Test("ActionCreationConfigView can be decoded from mock and re-encoded")
    func testActionCreationConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionCreationConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionCreationConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionCreationConfigView.self, from: encoded)
    }
    
    @Test("ActionError can be decoded from mock and re-encoded")
    func testActionErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionError.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionError.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 0 can be decoded and re-encoded")
    func testActionErrorKindVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 1 can be decoded and re-encoded")
    func testActionErrorKindVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 10 can be decoded and re-encoded")
    func testActionErrorKindVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 11 can be decoded and re-encoded")
    func testActionErrorKindVariant11DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant11.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 12 can be decoded and re-encoded")
    func testActionErrorKindVariant12DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant12.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 13 can be decoded and re-encoded")
    func testActionErrorKindVariant13DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant13.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 14 can be decoded and re-encoded")
    func testActionErrorKindVariant14DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant14.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 15 can be decoded and re-encoded")
    func testActionErrorKindVariant15DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant15.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 16 can be decoded and re-encoded")
    func testActionErrorKindVariant16DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant16.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 17 can be decoded and re-encoded")
    func testActionErrorKindVariant17DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant17.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 18 can be decoded and re-encoded")
    func testActionErrorKindVariant18DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant18.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 19 can be decoded and re-encoded")
    func testActionErrorKindVariant19DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant19.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 2 can be decoded and re-encoded")
    func testActionErrorKindVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 20 can be decoded and re-encoded")
    func testActionErrorKindVariant20DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant20.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 21 can be decoded and re-encoded")
    func testActionErrorKindVariant21DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant21.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 22 can be decoded and re-encoded")
    func testActionErrorKindVariant22DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant22.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 3 can be decoded and re-encoded")
    func testActionErrorKindVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 4 can be decoded and re-encoded")
    func testActionErrorKindVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 5 can be decoded and re-encoded")
    func testActionErrorKindVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 6 can be decoded and re-encoded")
    func testActionErrorKindVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 7 can be decoded and re-encoded")
    func testActionErrorKindVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 8 can be decoded and re-encoded")
    func testActionErrorKindVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionErrorKind variant 9 can be decoded and re-encoded")
    func testActionErrorKindVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionErrorKind.self, from: encoded)
    }
    
    @Test("ActionView variant 0 can be decoded and re-encoded")
    func testActionViewVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 1 can be decoded and re-encoded")
    func testActionViewVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 10 can be decoded and re-encoded")
    func testActionViewVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 11 can be decoded and re-encoded")
    func testActionViewVariant11DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant11.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 12 can be decoded and re-encoded")
    func testActionViewVariant12DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant12.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 13 can be decoded and re-encoded")
    func testActionViewVariant13DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant13.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 2 can be decoded and re-encoded")
    func testActionViewVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 3 can be decoded and re-encoded")
    func testActionViewVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 4 can be decoded and re-encoded")
    func testActionViewVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 5 can be decoded and re-encoded")
    func testActionViewVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 6 can be decoded and re-encoded")
    func testActionViewVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 7 can be decoded and re-encoded")
    func testActionViewVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 8 can be decoded and re-encoded")
    func testActionViewVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionView variant 9 can be decoded and re-encoded")
    func testActionViewVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionView_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionView.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 0 can be decoded and re-encoded")
    func testActionsValidationErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 1 can be decoded and re-encoded")
    func testActionsValidationErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 10 can be decoded and re-encoded")
    func testActionsValidationErrorVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 11 can be decoded and re-encoded")
    func testActionsValidationErrorVariant11DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant11.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 12 can be decoded and re-encoded")
    func testActionsValidationErrorVariant12DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant12.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 13 can be decoded and re-encoded")
    func testActionsValidationErrorVariant13DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant13.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 14 can be decoded and re-encoded")
    func testActionsValidationErrorVariant14DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant14.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 15 can be decoded and re-encoded")
    func testActionsValidationErrorVariant15DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant15.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 16 can be decoded and re-encoded")
    func testActionsValidationErrorVariant16DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant16.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 2 can be decoded and re-encoded")
    func testActionsValidationErrorVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 3 can be decoded and re-encoded")
    func testActionsValidationErrorVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 4 can be decoded and re-encoded")
    func testActionsValidationErrorVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 5 can be decoded and re-encoded")
    func testActionsValidationErrorVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 6 can be decoded and re-encoded")
    func testActionsValidationErrorVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 7 can be decoded and re-encoded")
    func testActionsValidationErrorVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 8 can be decoded and re-encoded")
    func testActionsValidationErrorVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("ActionsValidationError variant 9 can be decoded and re-encoded")
    func testActionsValidationErrorVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ActionsValidationError.self, from: encoded)
    }
    
    @Test("AddKeyAction can be decoded from mock and re-encoded")
    func testAddKeyActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("AddKeyAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(AddKeyAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(AddKeyAction.self, from: encoded)
    }
    
    @Test("BandwidthRequest can be decoded from mock and re-encoded")
    func testBandwidthRequestDecodingAndEncoding() throws {
        let data = try loadMockJSON("BandwidthRequest.json")
        
        // Test decoding
        let decoded = try decoder.decode(BandwidthRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(BandwidthRequest.self, from: encoded)
    }
    
    @Test("BandwidthRequestBitmap can be decoded from mock and re-encoded")
    func testBandwidthRequestBitmapDecodingAndEncoding() throws {
        let data = try loadMockJSON("BandwidthRequestBitmap.json")
        
        // Test decoding
        let decoded = try decoder.decode(BandwidthRequestBitmap.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(BandwidthRequestBitmap.self, from: encoded)
    }
    
    @Test("BandwidthRequests variant 0 can be decoded and re-encoded")
    func testBandwidthRequestsVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("BandwidthRequests_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(BandwidthRequests.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(BandwidthRequests.self, from: encoded)
    }
    
    @Test("BandwidthRequestsV1 can be decoded from mock and re-encoded")
    func testBandwidthRequestsV1DecodingAndEncoding() throws {
        let data = try loadMockJSON("BandwidthRequestsV1.json")
        
        // Test decoding
        let decoded = try decoder.decode(BandwidthRequestsV1.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(BandwidthRequestsV1.self, from: encoded)
    }
    
    @Test("BlockHeaderInnerLiteView can be decoded from mock and re-encoded")
    func testBlockHeaderInnerLiteViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("BlockHeaderInnerLiteView.json")
        
        // Test decoding
        let decoded = try decoder.decode(BlockHeaderInnerLiteView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(BlockHeaderInnerLiteView.self, from: encoded)
    }
    
    @Test("BlockHeaderView can be decoded from mock and re-encoded")
    func testBlockHeaderViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("BlockHeaderView.json")
        
        // Test decoding
        let decoded = try decoder.decode(BlockHeaderView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(BlockHeaderView.self, from: encoded)
    }
    
    @Test("BlockId variant 0 can be decoded and re-encoded")
    func testBlockIdVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("BlockId_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(BlockId.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(BlockId.self, from: encoded)
    }
    
    @Test("BlockId variant 1 can be decoded and re-encoded")
    func testBlockIdVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("BlockId_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(BlockId.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(BlockId.self, from: encoded)
    }
    
    @Test("BlockStatusView can be decoded from mock and re-encoded")
    func testBlockStatusViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("BlockStatusView.json")
        
        // Test decoding
        let decoded = try decoder.decode(BlockStatusView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(BlockStatusView.self, from: encoded)
    }
    
    @Test("CallResult can be decoded from mock and re-encoded")
    func testCallResultDecodingAndEncoding() throws {
        let data = try loadMockJSON("CallResult.json")
        
        // Test decoding
        let decoded = try decoder.decode(CallResult.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CallResult.self, from: encoded)
    }
    
    @Test("CatchupStatusView can be decoded from mock and re-encoded")
    func testCatchupStatusViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("CatchupStatusView.json")
        
        // Test decoding
        let decoded = try decoder.decode(CatchupStatusView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CatchupStatusView.self, from: encoded)
    }
    
    @Test("ChunkDistributionNetworkConfig can be decoded from mock and re-encoded")
    func testChunkDistributionNetworkConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("ChunkDistributionNetworkConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(ChunkDistributionNetworkConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ChunkDistributionNetworkConfig.self, from: encoded)
    }
    
    @Test("ChunkDistributionUris can be decoded from mock and re-encoded")
    func testChunkDistributionUrisDecodingAndEncoding() throws {
        let data = try loadMockJSON("ChunkDistributionUris.json")
        
        // Test decoding
        let decoded = try decoder.decode(ChunkDistributionUris.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ChunkDistributionUris.self, from: encoded)
    }
    
    @Test("ChunkHeaderView can be decoded from mock and re-encoded")
    func testChunkHeaderViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("ChunkHeaderView.json")
        
        // Test decoding
        let decoded = try decoder.decode(ChunkHeaderView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ChunkHeaderView.self, from: encoded)
    }
    
    @Test("CloudArchivalReaderConfig can be decoded from mock and re-encoded")
    func testCloudArchivalReaderConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("CloudArchivalReaderConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(CloudArchivalReaderConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CloudArchivalReaderConfig.self, from: encoded)
    }
    
    @Test("CloudArchivalWriterConfig can be decoded from mock and re-encoded")
    func testCloudArchivalWriterConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("CloudArchivalWriterConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(CloudArchivalWriterConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CloudArchivalWriterConfig.self, from: encoded)
    }
    
    @Test("CloudStorageConfig can be decoded from mock and re-encoded")
    func testCloudStorageConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("CloudStorageConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(CloudStorageConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CloudStorageConfig.self, from: encoded)
    }
    
    @Test("CompilationError variant 0 can be decoded and re-encoded")
    func testCompilationErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("CompilationError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(CompilationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CompilationError.self, from: encoded)
    }
    
    @Test("CompilationError variant 1 can be decoded and re-encoded")
    func testCompilationErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("CompilationError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(CompilationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CompilationError.self, from: encoded)
    }
    
    @Test("CompilationError variant 2 can be decoded and re-encoded")
    func testCompilationErrorVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("CompilationError_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(CompilationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CompilationError.self, from: encoded)
    }
    
    @Test("CongestionControlConfigView can be decoded from mock and re-encoded")
    func testCongestionControlConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("CongestionControlConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(CongestionControlConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CongestionControlConfigView.self, from: encoded)
    }
    
    @Test("CongestionInfoView can be decoded from mock and re-encoded")
    func testCongestionInfoViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("CongestionInfoView.json")
        
        // Test decoding
        let decoded = try decoder.decode(CongestionInfoView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CongestionInfoView.self, from: encoded)
    }
    
    @Test("ContractCodeView can be decoded from mock and re-encoded")
    func testContractCodeViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("ContractCodeView.json")
        
        // Test decoding
        let decoded = try decoder.decode(ContractCodeView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ContractCodeView.self, from: encoded)
    }
    
    @Test("CostGasUsed can be decoded from mock and re-encoded")
    func testCostGasUsedDecodingAndEncoding() throws {
        let data = try loadMockJSON("CostGasUsed.json")
        
        // Test decoding
        let decoded = try decoder.decode(CostGasUsed.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CostGasUsed.self, from: encoded)
    }
    
    @Test("CurrentEpochValidatorInfo can be decoded from mock and re-encoded")
    func testCurrentEpochValidatorInfoDecodingAndEncoding() throws {
        let data = try loadMockJSON("CurrentEpochValidatorInfo.json")
        
        // Test decoding
        let decoded = try decoder.decode(CurrentEpochValidatorInfo.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(CurrentEpochValidatorInfo.self, from: encoded)
    }
    
    @Test("DataReceiptCreationConfigView can be decoded from mock and re-encoded")
    func testDataReceiptCreationConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("DataReceiptCreationConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(DataReceiptCreationConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DataReceiptCreationConfigView.self, from: encoded)
    }
    
    @Test("DataReceiverView can be decoded from mock and re-encoded")
    func testDataReceiverViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("DataReceiverView.json")
        
        // Test decoding
        let decoded = try decoder.decode(DataReceiverView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DataReceiverView.self, from: encoded)
    }
    
    @Test("DelegateAction can be decoded from mock and re-encoded")
    func testDelegateActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("DelegateAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(DelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DelegateAction.self, from: encoded)
    }
    
    @Test("DeleteAccountAction can be decoded from mock and re-encoded")
    func testDeleteAccountActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("DeleteAccountAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(DeleteAccountAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DeleteAccountAction.self, from: encoded)
    }
    
    @Test("DeleteKeyAction can be decoded from mock and re-encoded")
    func testDeleteKeyActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("DeleteKeyAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(DeleteKeyAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DeleteKeyAction.self, from: encoded)
    }
    
    @Test("DeployContractAction can be decoded from mock and re-encoded")
    func testDeployContractActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("DeployContractAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(DeployContractAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DeployContractAction.self, from: encoded)
    }
    
    @Test("DeployGlobalContractAction can be decoded from mock and re-encoded")
    func testDeployGlobalContractActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("DeployGlobalContractAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(DeployGlobalContractAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DeployGlobalContractAction.self, from: encoded)
    }
    
    @Test("DetailedDebugStatus can be decoded from mock and re-encoded")
    func testDetailedDebugStatusDecodingAndEncoding() throws {
        let data = try loadMockJSON("DetailedDebugStatus.json")
        
        // Test decoding
        let decoded = try decoder.decode(DetailedDebugStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DetailedDebugStatus.self, from: encoded)
    }
    
    @Test("DeterministicAccountStateInit variant 0 can be decoded and re-encoded")
    func testDeterministicAccountStateInitVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("DeterministicAccountStateInit_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(DeterministicAccountStateInit.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DeterministicAccountStateInit.self, from: encoded)
    }
    
    @Test("DeterministicAccountStateInitV1 can be decoded from mock and re-encoded")
    func testDeterministicAccountStateInitV1DecodingAndEncoding() throws {
        let data = try loadMockJSON("DeterministicAccountStateInitV1.json")
        
        // Test decoding
        let decoded = try decoder.decode(DeterministicAccountStateInitV1.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DeterministicAccountStateInitV1.self, from: encoded)
    }
    
    @Test("DeterministicStateInitAction can be decoded from mock and re-encoded")
    func testDeterministicStateInitActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("DeterministicStateInitAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(DeterministicStateInitAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DeterministicStateInitAction.self, from: encoded)
    }
    
    @Test("Direction can be decoded from mock and re-encoded")
    func testDirectionDecodingAndEncoding() throws {
        let data = try loadMockJSON("Direction.json")
        
        // Test decoding
        let decoded = try decoder.decode(Direction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(Direction.self, from: encoded)
    }
    
    @Test("DumpConfig can be decoded from mock and re-encoded")
    func testDumpConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("DumpConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(DumpConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DumpConfig.self, from: encoded)
    }
    
    @Test("DurationAsStdSchemaProvider can be decoded from mock and re-encoded")
    func testDurationAsStdSchemaProviderDecodingAndEncoding() throws {
        let data = try loadMockJSON("DurationAsStdSchemaProvider.json")
        
        // Test decoding
        let decoded = try decoder.decode(DurationAsStdSchemaProvider.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(DurationAsStdSchemaProvider.self, from: encoded)
    }
    
    @Test("EpochId can be decoded from mock and re-encoded")
    func testEpochIdDecodingAndEncoding() throws {
        let data = try loadMockJSON("EpochId.json")
        
        // Test decoding
        let decoded = try decoder.decode(EpochId.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(EpochId.self, from: encoded)
    }
    
    @Test("EpochSyncConfig can be decoded from mock and re-encoded")
    func testEpochSyncConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("EpochSyncConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(EpochSyncConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(EpochSyncConfig.self, from: encoded)
    }
    
    @Test("ExecutionMetadataView can be decoded from mock and re-encoded")
    func testExecutionMetadataViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("ExecutionMetadataView.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExecutionMetadataView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExecutionMetadataView.self, from: encoded)
    }
    
    @Test("ExecutionOutcomeView can be decoded from mock and re-encoded")
    func testExecutionOutcomeViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("ExecutionOutcomeView.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExecutionOutcomeView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExecutionOutcomeView.self, from: encoded)
    }
    
    @Test("ExecutionOutcomeWithIdView can be decoded from mock and re-encoded")
    func testExecutionOutcomeWithIdViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("ExecutionOutcomeWithIdView.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExecutionOutcomeWithIdView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExecutionOutcomeWithIdView.self, from: encoded)
    }
    
    @Test("ExecutionStatusView variant 0 can be decoded and re-encoded")
    func testExecutionStatusViewVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ExecutionStatusView_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExecutionStatusView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExecutionStatusView.self, from: encoded)
    }
    
    @Test("ExecutionStatusView variant 1 can be decoded and re-encoded")
    func testExecutionStatusViewVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ExecutionStatusView_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExecutionStatusView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExecutionStatusView.self, from: encoded)
    }
    
    @Test("ExecutionStatusView variant 2 can be decoded and re-encoded")
    func testExecutionStatusViewVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("ExecutionStatusView_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExecutionStatusView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExecutionStatusView.self, from: encoded)
    }
    
    @Test("ExecutionStatusView variant 3 can be decoded and re-encoded")
    func testExecutionStatusViewVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("ExecutionStatusView_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExecutionStatusView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExecutionStatusView.self, from: encoded)
    }
    
    @Test("ExtCostsConfigView can be decoded from mock and re-encoded")
    func testExtCostsConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("ExtCostsConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExtCostsConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExtCostsConfigView.self, from: encoded)
    }
    
    @Test("ExternalStorageConfig can be decoded from mock and re-encoded")
    func testExternalStorageConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("ExternalStorageConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExternalStorageConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExternalStorageConfig.self, from: encoded)
    }
    
    @Test("ExternalStorageLocation variant 0 can be decoded and re-encoded")
    func testExternalStorageLocationVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ExternalStorageLocation_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExternalStorageLocation.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExternalStorageLocation.self, from: encoded)
    }
    
    @Test("ExternalStorageLocation variant 1 can be decoded and re-encoded")
    func testExternalStorageLocationVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ExternalStorageLocation_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExternalStorageLocation.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExternalStorageLocation.self, from: encoded)
    }
    
    @Test("ExternalStorageLocation variant 2 can be decoded and re-encoded")
    func testExternalStorageLocationVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("ExternalStorageLocation_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(ExternalStorageLocation.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ExternalStorageLocation.self, from: encoded)
    }
    
    @Test("Fee can be decoded from mock and re-encoded")
    func testFeeDecodingAndEncoding() throws {
        let data = try loadMockJSON("Fee.json")
        
        // Test decoding
        let decoded = try decoder.decode(Fee.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(Fee.self, from: encoded)
    }
    
    @Test("FinalExecutionOutcomeView can be decoded from mock and re-encoded")
    func testFinalExecutionOutcomeViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("FinalExecutionOutcomeView.json")
        
        // Test decoding
        let decoded = try decoder.decode(FinalExecutionOutcomeView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FinalExecutionOutcomeView.self, from: encoded)
    }
    
    @Test("FinalExecutionOutcomeWithReceiptView can be decoded from mock and re-encoded")
    func testFinalExecutionOutcomeWithReceiptViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("FinalExecutionOutcomeWithReceiptView.json")
        
        // Test decoding
        let decoded = try decoder.decode(FinalExecutionOutcomeWithReceiptView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FinalExecutionOutcomeWithReceiptView.self, from: encoded)
    }
    
    @Test("FinalExecutionStatus variant 0 can be decoded and re-encoded")
    func testFinalExecutionStatusVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("FinalExecutionStatus_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(FinalExecutionStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FinalExecutionStatus.self, from: encoded)
    }
    
    @Test("FinalExecutionStatus variant 1 can be decoded and re-encoded")
    func testFinalExecutionStatusVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("FinalExecutionStatus_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(FinalExecutionStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FinalExecutionStatus.self, from: encoded)
    }
    
    @Test("FinalExecutionStatus variant 2 can be decoded and re-encoded")
    func testFinalExecutionStatusVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("FinalExecutionStatus_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(FinalExecutionStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FinalExecutionStatus.self, from: encoded)
    }
    
    @Test("FinalExecutionStatus variant 3 can be decoded and re-encoded")
    func testFinalExecutionStatusVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("FinalExecutionStatus_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(FinalExecutionStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FinalExecutionStatus.self, from: encoded)
    }
    
    @Test("Finality can be decoded from mock and re-encoded")
    func testFinalityDecodingAndEncoding() throws {
        let data = try loadMockJSON("Finality.json")
        
        // Test decoding
        let decoded = try decoder.decode(Finality.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(Finality.self, from: encoded)
    }
    
    @Test("FunctionCallAction can be decoded from mock and re-encoded")
    func testFunctionCallActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("FunctionCallAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(FunctionCallAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FunctionCallAction.self, from: encoded)
    }
    
    @Test("FunctionCallError variant 0 can be decoded and re-encoded")
    func testFunctionCallErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("FunctionCallError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FunctionCallError.self, from: encoded)
    }
    
    @Test("FunctionCallError variant 1 can be decoded and re-encoded")
    func testFunctionCallErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("FunctionCallError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FunctionCallError.self, from: encoded)
    }
    
    @Test("FunctionCallError variant 2 can be decoded and re-encoded")
    func testFunctionCallErrorVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("FunctionCallError_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FunctionCallError.self, from: encoded)
    }
    
    @Test("FunctionCallError variant 3 can be decoded and re-encoded")
    func testFunctionCallErrorVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("FunctionCallError_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FunctionCallError.self, from: encoded)
    }
    
    @Test("FunctionCallError variant 4 can be decoded and re-encoded")
    func testFunctionCallErrorVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("FunctionCallError_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FunctionCallError.self, from: encoded)
    }
    
    @Test("FunctionCallError variant 5 can be decoded and re-encoded")
    func testFunctionCallErrorVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("FunctionCallError_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FunctionCallError.self, from: encoded)
    }
    
    @Test("FunctionCallError variant 6 can be decoded and re-encoded")
    func testFunctionCallErrorVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("FunctionCallError_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FunctionCallError.self, from: encoded)
    }
    
    @Test("FunctionCallPermission can be decoded from mock and re-encoded")
    func testFunctionCallPermissionDecodingAndEncoding() throws {
        let data = try loadMockJSON("FunctionCallPermission.json")
        
        // Test decoding
        let decoded = try decoder.decode(FunctionCallPermission.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(FunctionCallPermission.self, from: encoded)
    }
    
    @Test("GCConfig can be decoded from mock and re-encoded")
    func testGCConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("GCConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(GCConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(GCConfig.self, from: encoded)
    }
    
    @Test("GasKeyView can be decoded from mock and re-encoded")
    func testGasKeyViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("GasKeyView.json")
        
        // Test decoding
        let decoded = try decoder.decode(GasKeyView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(GasKeyView.self, from: encoded)
    }
    
    @Test("GenesisConfig can be decoded from mock and re-encoded")
    func testGenesisConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("GenesisConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(GenesisConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(GenesisConfig.self, from: encoded)
    }
    
    @Test("GlobalContractDeployMode variant 0 can be decoded and re-encoded")
    func testGlobalContractDeployModeVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("GlobalContractDeployMode_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(GlobalContractDeployMode.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(GlobalContractDeployMode.self, from: encoded)
    }
    
    @Test("GlobalContractDeployMode variant 1 can be decoded and re-encoded")
    func testGlobalContractDeployModeVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("GlobalContractDeployMode_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(GlobalContractDeployMode.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(GlobalContractDeployMode.self, from: encoded)
    }
    
    @Test("GlobalContractIdentifier variant 0 can be decoded and re-encoded")
    func testGlobalContractIdentifierVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("GlobalContractIdentifier_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(GlobalContractIdentifier.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(GlobalContractIdentifier.self, from: encoded)
    }
    
    @Test("GlobalContractIdentifier variant 1 can be decoded and re-encoded")
    func testGlobalContractIdentifierVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("GlobalContractIdentifier_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(GlobalContractIdentifier.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(GlobalContractIdentifier.self, from: encoded)
    }
    
    @Test("GlobalContractIdentifierView variant 0 can be decoded and re-encoded")
    func testGlobalContractIdentifierViewVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("GlobalContractIdentifierView_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(GlobalContractIdentifierView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(GlobalContractIdentifierView.self, from: encoded)
    }
    
    @Test("GlobalContractIdentifierView variant 1 can be decoded and re-encoded")
    func testGlobalContractIdentifierViewVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("GlobalContractIdentifierView_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(GlobalContractIdentifierView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(GlobalContractIdentifierView.self, from: encoded)
    }
    
    @Test("HostError variant 0 can be decoded and re-encoded")
    func testHostErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 1 can be decoded and re-encoded")
    func testHostErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 10 can be decoded and re-encoded")
    func testHostErrorVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 11 can be decoded and re-encoded")
    func testHostErrorVariant11DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant11.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 12 can be decoded and re-encoded")
    func testHostErrorVariant12DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant12.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 13 can be decoded and re-encoded")
    func testHostErrorVariant13DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant13.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 14 can be decoded and re-encoded")
    func testHostErrorVariant14DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant14.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 15 can be decoded and re-encoded")
    func testHostErrorVariant15DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant15.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 16 can be decoded and re-encoded")
    func testHostErrorVariant16DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant16.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 17 can be decoded and re-encoded")
    func testHostErrorVariant17DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant17.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 18 can be decoded and re-encoded")
    func testHostErrorVariant18DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant18.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 19 can be decoded and re-encoded")
    func testHostErrorVariant19DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant19.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 2 can be decoded and re-encoded")
    func testHostErrorVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 20 can be decoded and re-encoded")
    func testHostErrorVariant20DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant20.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 21 can be decoded and re-encoded")
    func testHostErrorVariant21DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant21.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 22 can be decoded and re-encoded")
    func testHostErrorVariant22DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant22.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 23 can be decoded and re-encoded")
    func testHostErrorVariant23DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant23.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 24 can be decoded and re-encoded")
    func testHostErrorVariant24DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant24.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 25 can be decoded and re-encoded")
    func testHostErrorVariant25DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant25.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 26 can be decoded and re-encoded")
    func testHostErrorVariant26DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant26.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 27 can be decoded and re-encoded")
    func testHostErrorVariant27DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant27.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 28 can be decoded and re-encoded")
    func testHostErrorVariant28DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant28.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 29 can be decoded and re-encoded")
    func testHostErrorVariant29DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant29.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 3 can be decoded and re-encoded")
    func testHostErrorVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 30 can be decoded and re-encoded")
    func testHostErrorVariant30DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant30.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 31 can be decoded and re-encoded")
    func testHostErrorVariant31DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant31.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 32 can be decoded and re-encoded")
    func testHostErrorVariant32DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant32.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 4 can be decoded and re-encoded")
    func testHostErrorVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 5 can be decoded and re-encoded")
    func testHostErrorVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 6 can be decoded and re-encoded")
    func testHostErrorVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 7 can be decoded and re-encoded")
    func testHostErrorVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 8 can be decoded and re-encoded")
    func testHostErrorVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("HostError variant 9 can be decoded and re-encoded")
    func testHostErrorVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("HostError_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(HostError.self, from: encoded)
    }
    
    @Test("InvalidAccessKeyError variant 0 can be decoded and re-encoded")
    func testInvalidAccessKeyErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidAccessKeyError.self, from: encoded)
    }
    
    @Test("InvalidAccessKeyError variant 1 can be decoded and re-encoded")
    func testInvalidAccessKeyErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidAccessKeyError.self, from: encoded)
    }
    
    @Test("InvalidAccessKeyError variant 2 can be decoded and re-encoded")
    func testInvalidAccessKeyErrorVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidAccessKeyError.self, from: encoded)
    }
    
    @Test("InvalidAccessKeyError variant 3 can be decoded and re-encoded")
    func testInvalidAccessKeyErrorVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidAccessKeyError.self, from: encoded)
    }
    
    @Test("InvalidAccessKeyError variant 4 can be decoded and re-encoded")
    func testInvalidAccessKeyErrorVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidAccessKeyError.self, from: encoded)
    }
    
    @Test("InvalidAccessKeyError variant 5 can be decoded and re-encoded")
    func testInvalidAccessKeyErrorVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidAccessKeyError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 0 can be decoded and re-encoded")
    func testInvalidTxErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 1 can be decoded and re-encoded")
    func testInvalidTxErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 10 can be decoded and re-encoded")
    func testInvalidTxErrorVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 11 can be decoded and re-encoded")
    func testInvalidTxErrorVariant11DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant11.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 12 can be decoded and re-encoded")
    func testInvalidTxErrorVariant12DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant12.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 13 can be decoded and re-encoded")
    func testInvalidTxErrorVariant13DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant13.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 14 can be decoded and re-encoded")
    func testInvalidTxErrorVariant14DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant14.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 15 can be decoded and re-encoded")
    func testInvalidTxErrorVariant15DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant15.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 16 can be decoded and re-encoded")
    func testInvalidTxErrorVariant16DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant16.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 17 can be decoded and re-encoded")
    func testInvalidTxErrorVariant17DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant17.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 2 can be decoded and re-encoded")
    func testInvalidTxErrorVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 3 can be decoded and re-encoded")
    func testInvalidTxErrorVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 4 can be decoded and re-encoded")
    func testInvalidTxErrorVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 5 can be decoded and re-encoded")
    func testInvalidTxErrorVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 6 can be decoded and re-encoded")
    func testInvalidTxErrorVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 7 can be decoded and re-encoded")
    func testInvalidTxErrorVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 8 can be decoded and re-encoded")
    func testInvalidTxErrorVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("InvalidTxError variant 9 can be decoded and re-encoded")
    func testInvalidTxErrorVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("InvalidTxError_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(InvalidTxError.self, from: encoded)
    }
    
    @Test("KnownProducerView can be decoded from mock and re-encoded")
    func testKnownProducerViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("KnownProducerView.json")
        
        // Test decoding
        let decoded = try decoder.decode(KnownProducerView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(KnownProducerView.self, from: encoded)
    }
    
    @Test("LightClientBlockLiteView can be decoded from mock and re-encoded")
    func testLightClientBlockLiteViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("LightClientBlockLiteView.json")
        
        // Test decoding
        let decoded = try decoder.decode(LightClientBlockLiteView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(LightClientBlockLiteView.self, from: encoded)
    }
    
    @Test("LimitConfig can be decoded from mock and re-encoded")
    func testLimitConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("LimitConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(LimitConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(LimitConfig.self, from: encoded)
    }
    
    @Test("LogSummaryStyle can be decoded from mock and re-encoded")
    func testLogSummaryStyleDecodingAndEncoding() throws {
        let data = try loadMockJSON("LogSummaryStyle.json")
        
        // Test decoding
        let decoded = try decoder.decode(LogSummaryStyle.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(LogSummaryStyle.self, from: encoded)
    }
    
    @Test("MerklePathItem can be decoded from mock and re-encoded")
    func testMerklePathItemDecodingAndEncoding() throws {
        let data = try loadMockJSON("MerklePathItem.json")
        
        // Test decoding
        let decoded = try decoder.decode(MerklePathItem.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(MerklePathItem.self, from: encoded)
    }
    
    @Test("MethodResolveError can be decoded from mock and re-encoded")
    func testMethodResolveErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("MethodResolveError.json")
        
        // Test decoding
        let decoded = try decoder.decode(MethodResolveError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(MethodResolveError.self, from: encoded)
    }
    
    @Test("MissingTrieValue can be decoded from mock and re-encoded")
    func testMissingTrieValueDecodingAndEncoding() throws {
        let data = try loadMockJSON("MissingTrieValue.json")
        
        // Test decoding
        let decoded = try decoder.decode(MissingTrieValue.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(MissingTrieValue.self, from: encoded)
    }
    
    @Test("MissingTrieValueContext variant 0 can be decoded and re-encoded")
    func testMissingTrieValueContextVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("MissingTrieValueContext_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(MissingTrieValueContext.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(MissingTrieValueContext.self, from: encoded)
    }
    
    @Test("MissingTrieValueContext variant 1 can be decoded and re-encoded")
    func testMissingTrieValueContextVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("MissingTrieValueContext_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(MissingTrieValueContext.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(MissingTrieValueContext.self, from: encoded)
    }
    
    @Test("MissingTrieValueContext variant 2 can be decoded and re-encoded")
    func testMissingTrieValueContextVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("MissingTrieValueContext_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(MissingTrieValueContext.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(MissingTrieValueContext.self, from: encoded)
    }
    
    @Test("MissingTrieValueContext variant 3 can be decoded and re-encoded")
    func testMissingTrieValueContextVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("MissingTrieValueContext_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(MissingTrieValueContext.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(MissingTrieValueContext.self, from: encoded)
    }
    
    @Test("NetworkInfoView can be decoded from mock and re-encoded")
    func testNetworkInfoViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("NetworkInfoView.json")
        
        // Test decoding
        let decoded = try decoder.decode(NetworkInfoView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NetworkInfoView.self, from: encoded)
    }
    
    @Test("NextEpochValidatorInfo can be decoded from mock and re-encoded")
    func testNextEpochValidatorInfoDecodingAndEncoding() throws {
        let data = try loadMockJSON("NextEpochValidatorInfo.json")
        
        // Test decoding
        let decoded = try decoder.decode(NextEpochValidatorInfo.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NextEpochValidatorInfo.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 0 can be decoded and re-encoded")
    func testNonDelegateActionVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 1 can be decoded and re-encoded")
    func testNonDelegateActionVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 10 can be decoded and re-encoded")
    func testNonDelegateActionVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 2 can be decoded and re-encoded")
    func testNonDelegateActionVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 3 can be decoded and re-encoded")
    func testNonDelegateActionVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 4 can be decoded and re-encoded")
    func testNonDelegateActionVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 5 can be decoded and re-encoded")
    func testNonDelegateActionVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 6 can be decoded and re-encoded")
    func testNonDelegateActionVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 7 can be decoded and re-encoded")
    func testNonDelegateActionVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 8 can be decoded and re-encoded")
    func testNonDelegateActionVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("NonDelegateAction variant 9 can be decoded and re-encoded")
    func testNonDelegateActionVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(NonDelegateAction.self, from: encoded)
    }
    
    @Test("PeerId can be decoded from mock and re-encoded")
    func testPeerIdDecodingAndEncoding() throws {
        let data = try loadMockJSON("PeerId.json")
        
        // Test decoding
        let decoded = try decoder.decode(PeerId.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PeerId.self, from: encoded)
    }
    
    @Test("PeerInfoView can be decoded from mock and re-encoded")
    func testPeerInfoViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("PeerInfoView.json")
        
        // Test decoding
        let decoded = try decoder.decode(PeerInfoView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PeerInfoView.self, from: encoded)
    }
    
    @Test("PrepareError variant 0 can be decoded and re-encoded")
    func testPrepareErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("PrepareError variant 1 can be decoded and re-encoded")
    func testPrepareErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("PrepareError variant 10 can be decoded and re-encoded")
    func testPrepareErrorVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("PrepareError variant 2 can be decoded and re-encoded")
    func testPrepareErrorVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("PrepareError variant 3 can be decoded and re-encoded")
    func testPrepareErrorVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("PrepareError variant 4 can be decoded and re-encoded")
    func testPrepareErrorVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("PrepareError variant 5 can be decoded and re-encoded")
    func testPrepareErrorVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("PrepareError variant 6 can be decoded and re-encoded")
    func testPrepareErrorVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("PrepareError variant 7 can be decoded and re-encoded")
    func testPrepareErrorVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("PrepareError variant 8 can be decoded and re-encoded")
    func testPrepareErrorVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("PrepareError variant 9 can be decoded and re-encoded")
    func testPrepareErrorVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("PrepareError_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(PrepareError.self, from: encoded)
    }
    
    @Test("ProtocolVersionCheckConfig can be decoded from mock and re-encoded")
    func testProtocolVersionCheckConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("ProtocolVersionCheckConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(ProtocolVersionCheckConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ProtocolVersionCheckConfig.self, from: encoded)
    }
    
    @Test("RangeOfUint64 can be decoded from mock and re-encoded")
    func testRangeOfUint64DecodingAndEncoding() throws {
        let data = try loadMockJSON("RangeOfUint64.json")
        
        // Test decoding
        let decoded = try decoder.decode(RangeOfUint64.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RangeOfUint64.self, from: encoded)
    }
    
    @Test("ReceiptEnumView variant 0 can be decoded and re-encoded")
    func testReceiptEnumViewVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptEnumView_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptEnumView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptEnumView.self, from: encoded)
    }
    
    @Test("ReceiptEnumView variant 1 can be decoded and re-encoded")
    func testReceiptEnumViewVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptEnumView_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptEnumView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptEnumView.self, from: encoded)
    }
    
    @Test("ReceiptEnumView variant 2 can be decoded and re-encoded")
    func testReceiptEnumViewVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptEnumView_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptEnumView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptEnumView.self, from: encoded)
    }
    
    @Test("ReceiptValidationError variant 0 can be decoded and re-encoded")
    func testReceiptValidationErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptValidationError.self, from: encoded)
    }
    
    @Test("ReceiptValidationError variant 1 can be decoded and re-encoded")
    func testReceiptValidationErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptValidationError.self, from: encoded)
    }
    
    @Test("ReceiptValidationError variant 2 can be decoded and re-encoded")
    func testReceiptValidationErrorVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptValidationError.self, from: encoded)
    }
    
    @Test("ReceiptValidationError variant 3 can be decoded and re-encoded")
    func testReceiptValidationErrorVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptValidationError.self, from: encoded)
    }
    
    @Test("ReceiptValidationError variant 4 can be decoded and re-encoded")
    func testReceiptValidationErrorVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptValidationError.self, from: encoded)
    }
    
    @Test("ReceiptValidationError variant 5 can be decoded and re-encoded")
    func testReceiptValidationErrorVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptValidationError.self, from: encoded)
    }
    
    @Test("ReceiptValidationError variant 6 can be decoded and re-encoded")
    func testReceiptValidationErrorVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptValidationError.self, from: encoded)
    }
    
    @Test("ReceiptValidationError variant 7 can be decoded and re-encoded")
    func testReceiptValidationErrorVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptValidationError.self, from: encoded)
    }
    
    @Test("ReceiptView can be decoded from mock and re-encoded")
    func testReceiptViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("ReceiptView.json")
        
        // Test decoding
        let decoded = try decoder.decode(ReceiptView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ReceiptView.self, from: encoded)
    }
    
    @Test("RpcBlockRequest variant 0 can be decoded and re-encoded")
    func testRpcBlockRequestVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcBlockRequest_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcBlockRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcBlockRequest.self, from: encoded)
    }
    
    @Test("RpcBlockRequest variant 1 can be decoded and re-encoded")
    func testRpcBlockRequestVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcBlockRequest_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcBlockRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcBlockRequest.self, from: encoded)
    }
    
    @Test("RpcBlockRequest variant 2 can be decoded and re-encoded")
    func testRpcBlockRequestVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcBlockRequest_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcBlockRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcBlockRequest.self, from: encoded)
    }
    
    @Test("RpcBlockResponse can be decoded from mock and re-encoded")
    func testRpcBlockResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcBlockResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcBlockResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcBlockResponse.self, from: encoded)
    }
    
    @Test("RpcChunkRequest variant 0 can be decoded and re-encoded")
    func testRpcChunkRequestVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcChunkRequest_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcChunkRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcChunkRequest.self, from: encoded)
    }
    
    @Test("RpcChunkRequest variant 1 can be decoded and re-encoded")
    func testRpcChunkRequestVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcChunkRequest_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcChunkRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcChunkRequest.self, from: encoded)
    }
    
    @Test("RpcChunkResponse can be decoded from mock and re-encoded")
    func testRpcChunkResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcChunkResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcChunkResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcChunkResponse.self, from: encoded)
    }
    
    @Test("RpcClientConfigResponse can be decoded from mock and re-encoded")
    func testRpcClientConfigResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcClientConfigResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcClientConfigResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcClientConfigResponse.self, from: encoded)
    }
    
    @Test("RpcCongestionLevelRequest variant 0 can be decoded and re-encoded")
    func testRpcCongestionLevelRequestVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcCongestionLevelRequest_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcCongestionLevelRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcCongestionLevelRequest.self, from: encoded)
    }
    
    @Test("RpcCongestionLevelRequest variant 1 can be decoded and re-encoded")
    func testRpcCongestionLevelRequestVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcCongestionLevelRequest_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcCongestionLevelRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcCongestionLevelRequest.self, from: encoded)
    }
    
    @Test("RpcCongestionLevelResponse can be decoded from mock and re-encoded")
    func testRpcCongestionLevelResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcCongestionLevelResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcCongestionLevelResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcCongestionLevelResponse.self, from: encoded)
    }
    
    @Test("RpcError variant 0 can be decoded and re-encoded")
    func testRpcErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcError.self, from: encoded)
    }
    
    @Test("RpcError variant 1 can be decoded and re-encoded")
    func testRpcErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcError.self, from: encoded)
    }
    
    @Test("RpcError variant 2 can be decoded and re-encoded")
    func testRpcErrorVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcError_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcError.self, from: encoded)
    }
    
    @Test("RpcGasPriceRequest can be decoded from mock and re-encoded")
    func testRpcGasPriceRequestDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcGasPriceRequest.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcGasPriceRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcGasPriceRequest.self, from: encoded)
    }
    
    @Test("RpcGasPriceResponse can be decoded from mock and re-encoded")
    func testRpcGasPriceResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcGasPriceResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcGasPriceResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcGasPriceResponse.self, from: encoded)
    }
    
    @Test("RpcKnownProducer can be decoded from mock and re-encoded")
    func testRpcKnownProducerDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcKnownProducer.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcKnownProducer.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcKnownProducer.self, from: encoded)
    }
    
    @Test("RpcLightClientBlockProofRequest can be decoded from mock and re-encoded")
    func testRpcLightClientBlockProofRequestDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcLightClientBlockProofRequest.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcLightClientBlockProofRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcLightClientBlockProofRequest.self, from: encoded)
    }
    
    @Test("RpcLightClientBlockProofResponse can be decoded from mock and re-encoded")
    func testRpcLightClientBlockProofResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcLightClientBlockProofResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcLightClientBlockProofResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcLightClientBlockProofResponse.self, from: encoded)
    }
    
    @Test("RpcLightClientExecutionProofRequest variant 0 can be decoded and re-encoded")
    func testRpcLightClientExecutionProofRequestVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcLightClientExecutionProofRequest_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcLightClientExecutionProofRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcLightClientExecutionProofRequest.self, from: encoded)
    }
    
    @Test("RpcLightClientExecutionProofRequest variant 1 can be decoded and re-encoded")
    func testRpcLightClientExecutionProofRequestVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcLightClientExecutionProofRequest_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcLightClientExecutionProofRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcLightClientExecutionProofRequest.self, from: encoded)
    }
    
    @Test("RpcLightClientExecutionProofResponse can be decoded from mock and re-encoded")
    func testRpcLightClientExecutionProofResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcLightClientExecutionProofResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcLightClientExecutionProofResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcLightClientExecutionProofResponse.self, from: encoded)
    }
    
    @Test("RpcLightClientNextBlockRequest can be decoded from mock and re-encoded")
    func testRpcLightClientNextBlockRequestDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcLightClientNextBlockRequest.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcLightClientNextBlockRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcLightClientNextBlockRequest.self, from: encoded)
    }
    
    @Test("RpcLightClientNextBlockResponse can be decoded from mock and re-encoded")
    func testRpcLightClientNextBlockResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcLightClientNextBlockResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcLightClientNextBlockResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcLightClientNextBlockResponse.self, from: encoded)
    }
    
    @Test("RpcMaintenanceWindowsRequest can be decoded from mock and re-encoded")
    func testRpcMaintenanceWindowsRequestDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcMaintenanceWindowsRequest.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcMaintenanceWindowsRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcMaintenanceWindowsRequest.self, from: encoded)
    }
    
    @Test("RpcNetworkInfoResponse can be decoded from mock and re-encoded")
    func testRpcNetworkInfoResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcNetworkInfoResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcNetworkInfoResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcNetworkInfoResponse.self, from: encoded)
    }
    
    @Test("RpcPeerInfo can be decoded from mock and re-encoded")
    func testRpcPeerInfoDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcPeerInfo.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcPeerInfo.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcPeerInfo.self, from: encoded)
    }
    
    @Test("RpcProtocolConfigRequest variant 0 can be decoded and re-encoded")
    func testRpcProtocolConfigRequestVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcProtocolConfigRequest_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcProtocolConfigRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcProtocolConfigRequest.self, from: encoded)
    }
    
    @Test("RpcProtocolConfigRequest variant 1 can be decoded and re-encoded")
    func testRpcProtocolConfigRequestVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcProtocolConfigRequest_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcProtocolConfigRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcProtocolConfigRequest.self, from: encoded)
    }
    
    @Test("RpcProtocolConfigRequest variant 2 can be decoded and re-encoded")
    func testRpcProtocolConfigRequestVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcProtocolConfigRequest_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcProtocolConfigRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcProtocolConfigRequest.self, from: encoded)
    }
    
    @Test("RpcProtocolConfigResponse can be decoded from mock and re-encoded")
    func testRpcProtocolConfigResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcProtocolConfigResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcProtocolConfigResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcProtocolConfigResponse.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 0 can be decoded and re-encoded")
    func testRpcQueryRequestVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 1 can be decoded and re-encoded")
    func testRpcQueryRequestVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 10 can be decoded and re-encoded")
    func testRpcQueryRequestVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 11 can be decoded and re-encoded")
    func testRpcQueryRequestVariant11DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant11.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 12 can be decoded and re-encoded")
    func testRpcQueryRequestVariant12DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant12.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 13 can be decoded and re-encoded")
    func testRpcQueryRequestVariant13DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant13.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 14 can be decoded and re-encoded")
    func testRpcQueryRequestVariant14DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant14.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 15 can be decoded and re-encoded")
    func testRpcQueryRequestVariant15DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant15.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 16 can be decoded and re-encoded")
    func testRpcQueryRequestVariant16DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant16.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 17 can be decoded and re-encoded")
    func testRpcQueryRequestVariant17DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant17.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 18 can be decoded and re-encoded")
    func testRpcQueryRequestVariant18DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant18.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 19 can be decoded and re-encoded")
    func testRpcQueryRequestVariant19DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant19.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 2 can be decoded and re-encoded")
    func testRpcQueryRequestVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 20 can be decoded and re-encoded")
    func testRpcQueryRequestVariant20DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant20.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 21 can be decoded and re-encoded")
    func testRpcQueryRequestVariant21DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant21.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 22 can be decoded and re-encoded")
    func testRpcQueryRequestVariant22DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant22.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 23 can be decoded and re-encoded")
    func testRpcQueryRequestVariant23DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant23.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 3 can be decoded and re-encoded")
    func testRpcQueryRequestVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 4 can be decoded and re-encoded")
    func testRpcQueryRequestVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 5 can be decoded and re-encoded")
    func testRpcQueryRequestVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 6 can be decoded and re-encoded")
    func testRpcQueryRequestVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 7 can be decoded and re-encoded")
    func testRpcQueryRequestVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 8 can be decoded and re-encoded")
    func testRpcQueryRequestVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryRequest variant 9 can be decoded and re-encoded")
    func testRpcQueryRequestVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryRequest.self, from: encoded)
    }
    
    @Test("RpcQueryResponse variant 0 can be decoded and re-encoded")
    func testRpcQueryResponseVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryResponse.self, from: encoded)
    }
    
    @Test("RpcQueryResponse variant 1 can be decoded and re-encoded")
    func testRpcQueryResponseVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryResponse.self, from: encoded)
    }
    
    @Test("RpcQueryResponse variant 2 can be decoded and re-encoded")
    func testRpcQueryResponseVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryResponse.self, from: encoded)
    }
    
    @Test("RpcQueryResponse variant 3 can be decoded and re-encoded")
    func testRpcQueryResponseVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryResponse.self, from: encoded)
    }
    
    @Test("RpcQueryResponse variant 4 can be decoded and re-encoded")
    func testRpcQueryResponseVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryResponse.self, from: encoded)
    }
    
    @Test("RpcQueryResponse variant 5 can be decoded and re-encoded")
    func testRpcQueryResponseVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcQueryResponse.self, from: encoded)
    }
    
    @Test("RpcReceiptRequest can be decoded from mock and re-encoded")
    func testRpcReceiptRequestDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcReceiptRequest.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcReceiptRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcReceiptRequest.self, from: encoded)
    }
    
    @Test("RpcReceiptResponse can be decoded from mock and re-encoded")
    func testRpcReceiptResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcReceiptResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcReceiptResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcReceiptResponse.self, from: encoded)
    }
    
    @Test("RpcRequestValidationErrorKind variant 0 can be decoded and re-encoded")
    func testRpcRequestValidationErrorKindVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcRequestValidationErrorKind_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcRequestValidationErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcRequestValidationErrorKind.self, from: encoded)
    }
    
    @Test("RpcRequestValidationErrorKind variant 1 can be decoded and re-encoded")
    func testRpcRequestValidationErrorKindVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcRequestValidationErrorKind_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcRequestValidationErrorKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcRequestValidationErrorKind.self, from: encoded)
    }
    
    @Test("RpcSendTransactionRequest can be decoded from mock and re-encoded")
    func testRpcSendTransactionRequestDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcSendTransactionRequest.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcSendTransactionRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcSendTransactionRequest.self, from: encoded)
    }
    
    @Test("RpcSplitStorageInfoResponse can be decoded from mock and re-encoded")
    func testRpcSplitStorageInfoResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcSplitStorageInfoResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcSplitStorageInfoResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcSplitStorageInfoResponse.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 0 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 1 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 10 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 11 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant11DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant11.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 12 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant12DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant12.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 13 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant13DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant13.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 14 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant14DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant14.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 15 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant15DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant15.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 16 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant16DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant16.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 17 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant17DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant17.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 18 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant18DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant18.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 19 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant19DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant19.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 2 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 20 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant20DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant20.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 3 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 4 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 5 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 6 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 7 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 8 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 9 can be decoded and re-encoded")
    func testRpcStateChangesInBlockByTypeRequestVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockByTypeResponse can be decoded from mock and re-encoded")
    func testRpcStateChangesInBlockByTypeResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockByTypeResponse.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockRequest variant 0 can be decoded and re-encoded")
    func testRpcStateChangesInBlockRequestVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockRequest_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockRequest variant 1 can be decoded and re-encoded")
    func testRpcStateChangesInBlockRequestVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockRequest_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockRequest variant 2 can be decoded and re-encoded")
    func testRpcStateChangesInBlockRequestVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockRequest_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockRequest.self, from: encoded)
    }
    
    @Test("RpcStateChangesInBlockResponse can be decoded from mock and re-encoded")
    func testRpcStateChangesInBlockResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStateChangesInBlockResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStateChangesInBlockResponse.self, from: encoded)
    }
    
    @Test("RpcStatusResponse can be decoded from mock and re-encoded")
    func testRpcStatusResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcStatusResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcStatusResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcStatusResponse.self, from: encoded)
    }
    
    @Test("RpcTransactionResponse variant 0 can be decoded and re-encoded")
    func testRpcTransactionResponseVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcTransactionResponse_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcTransactionResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcTransactionResponse.self, from: encoded)
    }
    
    @Test("RpcTransactionResponse variant 1 can be decoded and re-encoded")
    func testRpcTransactionResponseVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcTransactionResponse_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcTransactionResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcTransactionResponse.self, from: encoded)
    }
    
    @Test("RpcTransactionStatusRequest variant 0 can be decoded and re-encoded")
    func testRpcTransactionStatusRequestVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcTransactionStatusRequest_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcTransactionStatusRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcTransactionStatusRequest.self, from: encoded)
    }
    
    @Test("RpcTransactionStatusRequest variant 1 can be decoded and re-encoded")
    func testRpcTransactionStatusRequestVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcTransactionStatusRequest_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcTransactionStatusRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcTransactionStatusRequest.self, from: encoded)
    }
    
    @Test("RpcValidatorRequest variant 0 can be decoded and re-encoded")
    func testRpcValidatorRequestVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcValidatorRequest_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcValidatorRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcValidatorRequest.self, from: encoded)
    }
    
    @Test("RpcValidatorRequest variant 1 can be decoded and re-encoded")
    func testRpcValidatorRequestVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcValidatorRequest_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcValidatorRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcValidatorRequest.self, from: encoded)
    }
    
    @Test("RpcValidatorRequest variant 2 can be decoded and re-encoded")
    func testRpcValidatorRequestVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcValidatorRequest_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcValidatorRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcValidatorRequest.self, from: encoded)
    }
    
    @Test("RpcValidatorResponse can be decoded from mock and re-encoded")
    func testRpcValidatorResponseDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcValidatorResponse.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcValidatorResponse.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcValidatorResponse.self, from: encoded)
    }
    
    @Test("RpcValidatorsOrderedRequest can be decoded from mock and re-encoded")
    func testRpcValidatorsOrderedRequestDecodingAndEncoding() throws {
        let data = try loadMockJSON("RpcValidatorsOrderedRequest.json")
        
        // Test decoding
        let decoded = try decoder.decode(RpcValidatorsOrderedRequest.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RpcValidatorsOrderedRequest.self, from: encoded)
    }
    
    @Test("RuntimeConfigView can be decoded from mock and re-encoded")
    func testRuntimeConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("RuntimeConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(RuntimeConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RuntimeConfigView.self, from: encoded)
    }
    
    @Test("RuntimeFeesConfigView can be decoded from mock and re-encoded")
    func testRuntimeFeesConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("RuntimeFeesConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(RuntimeFeesConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(RuntimeFeesConfigView.self, from: encoded)
    }
    
    @Test("ShardLayout variant 0 can be decoded and re-encoded")
    func testShardLayoutVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ShardLayout_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ShardLayout.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ShardLayout.self, from: encoded)
    }
    
    @Test("ShardLayout variant 1 can be decoded and re-encoded")
    func testShardLayoutVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ShardLayout_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ShardLayout.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ShardLayout.self, from: encoded)
    }
    
    @Test("ShardLayout variant 2 can be decoded and re-encoded")
    func testShardLayoutVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("ShardLayout_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(ShardLayout.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ShardLayout.self, from: encoded)
    }
    
    @Test("ShardLayoutV0 can be decoded from mock and re-encoded")
    func testShardLayoutV0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ShardLayoutV0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ShardLayoutV0.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ShardLayoutV0.self, from: encoded)
    }
    
    @Test("ShardLayoutV1 can be decoded from mock and re-encoded")
    func testShardLayoutV1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ShardLayoutV1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ShardLayoutV1.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ShardLayoutV1.self, from: encoded)
    }
    
    @Test("ShardLayoutV2 can be decoded from mock and re-encoded")
    func testShardLayoutV2DecodingAndEncoding() throws {
        let data = try loadMockJSON("ShardLayoutV2.json")
        
        // Test decoding
        let decoded = try decoder.decode(ShardLayoutV2.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ShardLayoutV2.self, from: encoded)
    }
    
    @Test("ShardUId can be decoded from mock and re-encoded")
    func testShardUIdDecodingAndEncoding() throws {
        let data = try loadMockJSON("ShardUId.json")
        
        // Test decoding
        let decoded = try decoder.decode(ShardUId.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ShardUId.self, from: encoded)
    }
    
    @Test("SignedDelegateAction can be decoded from mock and re-encoded")
    func testSignedDelegateActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("SignedDelegateAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(SignedDelegateAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(SignedDelegateAction.self, from: encoded)
    }
    
    @Test("SignedTransactionView can be decoded from mock and re-encoded")
    func testSignedTransactionViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("SignedTransactionView.json")
        
        // Test decoding
        let decoded = try decoder.decode(SignedTransactionView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(SignedTransactionView.self, from: encoded)
    }
    
    @Test("SlashedValidator can be decoded from mock and re-encoded")
    func testSlashedValidatorDecodingAndEncoding() throws {
        let data = try loadMockJSON("SlashedValidator.json")
        
        // Test decoding
        let decoded = try decoder.decode(SlashedValidator.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(SlashedValidator.self, from: encoded)
    }
    
    @Test("StakeAction can be decoded from mock and re-encoded")
    func testStakeActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("StakeAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(StakeAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StakeAction.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 0 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 1 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 10 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 2 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 3 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 4 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 5 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 6 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 7 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 8 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeCauseView variant 9 can be decoded and re-encoded")
    func testStateChangeCauseViewVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeCauseView.self, from: encoded)
    }
    
    @Test("StateChangeKindView variant 0 can be decoded and re-encoded")
    func testStateChangeKindViewVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeKindView_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeKindView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeKindView.self, from: encoded)
    }
    
    @Test("StateChangeKindView variant 1 can be decoded and re-encoded")
    func testStateChangeKindViewVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeKindView_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeKindView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeKindView.self, from: encoded)
    }
    
    @Test("StateChangeKindView variant 2 can be decoded and re-encoded")
    func testStateChangeKindViewVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeKindView_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeKindView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeKindView.self, from: encoded)
    }
    
    @Test("StateChangeKindView variant 3 can be decoded and re-encoded")
    func testStateChangeKindViewVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeKindView_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeKindView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeKindView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 0 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 1 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 10 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant10DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant10.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 2 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 3 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 4 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 5 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 6 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 7 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 8 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateChangeWithCauseView variant 9 can be decoded and re-encoded")
    func testStateChangeWithCauseViewVariant9DecodingAndEncoding() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant9.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateChangeWithCauseView.self, from: encoded)
    }
    
    @Test("StateItem can be decoded from mock and re-encoded")
    func testStateItemDecodingAndEncoding() throws {
        let data = try loadMockJSON("StateItem.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateItem.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateItem.self, from: encoded)
    }
    
    @Test("StateSyncConfig can be decoded from mock and re-encoded")
    func testStateSyncConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("StateSyncConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(StateSyncConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StateSyncConfig.self, from: encoded)
    }
    
    @Test("StatusSyncInfo can be decoded from mock and re-encoded")
    func testStatusSyncInfoDecodingAndEncoding() throws {
        let data = try loadMockJSON("StatusSyncInfo.json")
        
        // Test decoding
        let decoded = try decoder.decode(StatusSyncInfo.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StatusSyncInfo.self, from: encoded)
    }
    
    @Test("StorageError variant 0 can be decoded and re-encoded")
    func testStorageErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("StorageError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StorageError.self, from: encoded)
    }
    
    @Test("StorageError variant 1 can be decoded and re-encoded")
    func testStorageErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("StorageError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StorageError.self, from: encoded)
    }
    
    @Test("StorageError variant 2 can be decoded and re-encoded")
    func testStorageErrorVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("StorageError_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StorageError.self, from: encoded)
    }
    
    @Test("StorageError variant 3 can be decoded and re-encoded")
    func testStorageErrorVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("StorageError_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StorageError.self, from: encoded)
    }
    
    @Test("StorageError variant 4 can be decoded and re-encoded")
    func testStorageErrorVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("StorageError_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StorageError.self, from: encoded)
    }
    
    @Test("StorageError variant 5 can be decoded and re-encoded")
    func testStorageErrorVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("StorageError_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StorageError.self, from: encoded)
    }
    
    @Test("StorageGetMode can be decoded from mock and re-encoded")
    func testStorageGetModeDecodingAndEncoding() throws {
        let data = try loadMockJSON("StorageGetMode.json")
        
        // Test decoding
        let decoded = try decoder.decode(StorageGetMode.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StorageGetMode.self, from: encoded)
    }
    
    @Test("StorageUsageConfigView can be decoded from mock and re-encoded")
    func testStorageUsageConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("StorageUsageConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(StorageUsageConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(StorageUsageConfigView.self, from: encoded)
    }
    
    @Test("SyncCheckpoint can be decoded from mock and re-encoded")
    func testSyncCheckpointDecodingAndEncoding() throws {
        let data = try loadMockJSON("SyncCheckpoint.json")
        
        // Test decoding
        let decoded = try decoder.decode(SyncCheckpoint.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(SyncCheckpoint.self, from: encoded)
    }
    
    @Test("SyncConcurrency can be decoded from mock and re-encoded")
    func testSyncConcurrencyDecodingAndEncoding() throws {
        let data = try loadMockJSON("SyncConcurrency.json")
        
        // Test decoding
        let decoded = try decoder.decode(SyncConcurrency.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(SyncConcurrency.self, from: encoded)
    }
    
    @Test("SyncConfig variant 0 can be decoded and re-encoded")
    func testSyncConfigVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("SyncConfig_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(SyncConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(SyncConfig.self, from: encoded)
    }
    
    @Test("SyncConfig variant 1 can be decoded and re-encoded")
    func testSyncConfigVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("SyncConfig_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(SyncConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(SyncConfig.self, from: encoded)
    }
    
    @Test("Tier1ProxyView can be decoded from mock and re-encoded")
    func testTier1ProxyViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("Tier1ProxyView.json")
        
        // Test decoding
        let decoded = try decoder.decode(Tier1ProxyView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(Tier1ProxyView.self, from: encoded)
    }
    
    @Test("TrackedShardsConfig variant 0 can be decoded and re-encoded")
    func testTrackedShardsConfigVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TrackedShardsConfig.self, from: encoded)
    }
    
    @Test("TrackedShardsConfig variant 1 can be decoded and re-encoded")
    func testTrackedShardsConfigVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TrackedShardsConfig.self, from: encoded)
    }
    
    @Test("TrackedShardsConfig variant 2 can be decoded and re-encoded")
    func testTrackedShardsConfigVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TrackedShardsConfig.self, from: encoded)
    }
    
    @Test("TrackedShardsConfig variant 3 can be decoded and re-encoded")
    func testTrackedShardsConfigVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TrackedShardsConfig.self, from: encoded)
    }
    
    @Test("TrackedShardsConfig variant 4 can be decoded and re-encoded")
    func testTrackedShardsConfigVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TrackedShardsConfig.self, from: encoded)
    }
    
    @Test("TrackedShardsConfig variant 5 can be decoded and re-encoded")
    func testTrackedShardsConfigVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TrackedShardsConfig.self, from: encoded)
    }
    
    @Test("TransferAction can be decoded from mock and re-encoded")
    func testTransferActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("TransferAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(TransferAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TransferAction.self, from: encoded)
    }
    
    @Test("TxExecutionError variant 0 can be decoded and re-encoded")
    func testTxExecutionErrorVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("TxExecutionError_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(TxExecutionError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TxExecutionError.self, from: encoded)
    }
    
    @Test("TxExecutionError variant 1 can be decoded and re-encoded")
    func testTxExecutionErrorVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("TxExecutionError_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(TxExecutionError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TxExecutionError.self, from: encoded)
    }
    
    @Test("TxExecutionStatus variant 0 can be decoded and re-encoded")
    func testTxExecutionStatusVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TxExecutionStatus.self, from: encoded)
    }
    
    @Test("TxExecutionStatus variant 1 can be decoded and re-encoded")
    func testTxExecutionStatusVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TxExecutionStatus.self, from: encoded)
    }
    
    @Test("TxExecutionStatus variant 2 can be decoded and re-encoded")
    func testTxExecutionStatusVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TxExecutionStatus.self, from: encoded)
    }
    
    @Test("TxExecutionStatus variant 3 can be decoded and re-encoded")
    func testTxExecutionStatusVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TxExecutionStatus.self, from: encoded)
    }
    
    @Test("TxExecutionStatus variant 4 can be decoded and re-encoded")
    func testTxExecutionStatusVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TxExecutionStatus.self, from: encoded)
    }
    
    @Test("TxExecutionStatus variant 5 can be decoded and re-encoded")
    func testTxExecutionStatusVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(TxExecutionStatus.self, from: encoded)
    }
    
    @Test("UseGlobalContractAction can be decoded from mock and re-encoded")
    func testUseGlobalContractActionDecodingAndEncoding() throws {
        let data = try loadMockJSON("UseGlobalContractAction.json")
        
        // Test decoding
        let decoded = try decoder.decode(UseGlobalContractAction.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(UseGlobalContractAction.self, from: encoded)
    }
    
    @Test("VMConfigView can be decoded from mock and re-encoded")
    func testVMConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("VMConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(VMConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(VMConfigView.self, from: encoded)
    }
    
    @Test("VMKind variant 0 can be decoded and re-encoded")
    func testVMKindVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("VMKind_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(VMKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(VMKind.self, from: encoded)
    }
    
    @Test("VMKind variant 1 can be decoded and re-encoded")
    func testVMKindVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("VMKind_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(VMKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(VMKind.self, from: encoded)
    }
    
    @Test("VMKind variant 2 can be decoded and re-encoded")
    func testVMKindVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("VMKind_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(VMKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(VMKind.self, from: encoded)
    }
    
    @Test("VMKind variant 3 can be decoded and re-encoded")
    func testVMKindVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("VMKind_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(VMKind.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(VMKind.self, from: encoded)
    }
    
    @Test("ValidatorInfo can be decoded from mock and re-encoded")
    func testValidatorInfoDecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorInfo.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorInfo.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorInfo.self, from: encoded)
    }
    
    @Test("ValidatorKickoutReason variant 0 can be decoded and re-encoded")
    func testValidatorKickoutReasonVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorKickoutReason.self, from: encoded)
    }
    
    @Test("ValidatorKickoutReason variant 1 can be decoded and re-encoded")
    func testValidatorKickoutReasonVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorKickoutReason.self, from: encoded)
    }
    
    @Test("ValidatorKickoutReason variant 2 can be decoded and re-encoded")
    func testValidatorKickoutReasonVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorKickoutReason.self, from: encoded)
    }
    
    @Test("ValidatorKickoutReason variant 3 can be decoded and re-encoded")
    func testValidatorKickoutReasonVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorKickoutReason.self, from: encoded)
    }
    
    @Test("ValidatorKickoutReason variant 4 can be decoded and re-encoded")
    func testValidatorKickoutReasonVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorKickoutReason.self, from: encoded)
    }
    
    @Test("ValidatorKickoutReason variant 5 can be decoded and re-encoded")
    func testValidatorKickoutReasonVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorKickoutReason.self, from: encoded)
    }
    
    @Test("ValidatorKickoutReason variant 6 can be decoded and re-encoded")
    func testValidatorKickoutReasonVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorKickoutReason.self, from: encoded)
    }
    
    @Test("ValidatorKickoutReason variant 7 can be decoded and re-encoded")
    func testValidatorKickoutReasonVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorKickoutReason.self, from: encoded)
    }
    
    @Test("ValidatorKickoutView can be decoded from mock and re-encoded")
    func testValidatorKickoutViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorKickoutView.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorKickoutView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorKickoutView.self, from: encoded)
    }
    
    @Test("ValidatorStakeView variant 0 can be decoded and re-encoded")
    func testValidatorStakeViewVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorStakeView_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorStakeView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorStakeView.self, from: encoded)
    }
    
    @Test("ValidatorStakeViewV1 can be decoded from mock and re-encoded")
    func testValidatorStakeViewV1DecodingAndEncoding() throws {
        let data = try loadMockJSON("ValidatorStakeViewV1.json")
        
        // Test decoding
        let decoded = try decoder.decode(ValidatorStakeViewV1.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ValidatorStakeViewV1.self, from: encoded)
    }
    
    @Test("Version can be decoded from mock and re-encoded")
    func testVersionDecodingAndEncoding() throws {
        let data = try loadMockJSON("Version.json")
        
        // Test decoding
        let decoded = try decoder.decode(Version.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(Version.self, from: encoded)
    }
    
    @Test("ViewStateResult can be decoded from mock and re-encoded")
    func testViewStateResultDecodingAndEncoding() throws {
        let data = try loadMockJSON("ViewStateResult.json")
        
        // Test decoding
        let decoded = try decoder.decode(ViewStateResult.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(ViewStateResult.self, from: encoded)
    }
    
    @Test("WasmTrap variant 0 can be decoded and re-encoded")
    func testWasmTrapVariant0DecodingAndEncoding() throws {
        let data = try loadMockJSON("WasmTrap_Variant0.json")
        
        // Test decoding
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(WasmTrap.self, from: encoded)
    }
    
    @Test("WasmTrap variant 1 can be decoded and re-encoded")
    func testWasmTrapVariant1DecodingAndEncoding() throws {
        let data = try loadMockJSON("WasmTrap_Variant1.json")
        
        // Test decoding
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(WasmTrap.self, from: encoded)
    }
    
    @Test("WasmTrap variant 2 can be decoded and re-encoded")
    func testWasmTrapVariant2DecodingAndEncoding() throws {
        let data = try loadMockJSON("WasmTrap_Variant2.json")
        
        // Test decoding
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(WasmTrap.self, from: encoded)
    }
    
    @Test("WasmTrap variant 3 can be decoded and re-encoded")
    func testWasmTrapVariant3DecodingAndEncoding() throws {
        let data = try loadMockJSON("WasmTrap_Variant3.json")
        
        // Test decoding
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(WasmTrap.self, from: encoded)
    }
    
    @Test("WasmTrap variant 4 can be decoded and re-encoded")
    func testWasmTrapVariant4DecodingAndEncoding() throws {
        let data = try loadMockJSON("WasmTrap_Variant4.json")
        
        // Test decoding
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(WasmTrap.self, from: encoded)
    }
    
    @Test("WasmTrap variant 5 can be decoded and re-encoded")
    func testWasmTrapVariant5DecodingAndEncoding() throws {
        let data = try loadMockJSON("WasmTrap_Variant5.json")
        
        // Test decoding
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(WasmTrap.self, from: encoded)
    }
    
    @Test("WasmTrap variant 6 can be decoded and re-encoded")
    func testWasmTrapVariant6DecodingAndEncoding() throws {
        let data = try loadMockJSON("WasmTrap_Variant6.json")
        
        // Test decoding
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(WasmTrap.self, from: encoded)
    }
    
    @Test("WasmTrap variant 7 can be decoded and re-encoded")
    func testWasmTrapVariant7DecodingAndEncoding() throws {
        let data = try loadMockJSON("WasmTrap_Variant7.json")
        
        // Test decoding
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(WasmTrap.self, from: encoded)
    }
    
    @Test("WasmTrap variant 8 can be decoded and re-encoded")
    func testWasmTrapVariant8DecodingAndEncoding() throws {
        let data = try loadMockJSON("WasmTrap_Variant8.json")
        
        // Test decoding
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(WasmTrap.self, from: encoded)
    }
    
    @Test("WitnessConfigView can be decoded from mock and re-encoded")
    func testWitnessConfigViewDecodingAndEncoding() throws {
        let data = try loadMockJSON("WitnessConfigView.json")
        
        // Test decoding
        let decoded = try decoder.decode(WitnessConfigView.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(WitnessConfigView.self, from: encoded)
    }
    
}
