//
// TypesDecodingTests.swift
// Auto-generated tests for NEAR JSON-RPC Types
//
// DO NOT EDIT: This file is auto-generated by generate_all_tests.py
//

import Testing
import Foundation
@testable import NearJsonRpcTypes

@Suite("Type Encoding/Decoding Tests")
struct TypesDecodingTests {
    
    let decoder: JSONDecoder
    let encoder: JSONEncoder
    
    init() {
        decoder = JSONDecoder()
        decoder.keyDecodingStrategy = .convertFromSnakeCase
        
        encoder = JSONEncoder()
        encoder.keyEncodingStrategy = .convertToSnakeCase
        encoder.outputFormatting = [.prettyPrinted, .sortedKeys]
    }
    
    /// Load mock JSON data from file
    func loadMockJSON(_ filename: String) throws -> Data {
        let testBundle = Bundle.module
        guard let url = testBundle.url(forResource: filename.replacingOccurrences(of: ".json", with: ""), withExtension: "json", subdirectory: "Mock") else {
            throw NSError(domain: "TestError", code: 1, userInfo: [NSLocalizedDescriptionKey: "Mock file not found: \(filename)"])
        }
        return try Data(contentsOf: url)
    }
    
    @Test("JsonRpcRequestForBlock can be decoded and re-encoded")
    func testJsonRpcRequestForBlockDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForBlock.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForBlock.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForBlock.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForBlockEffects can be decoded and re-encoded")
    func testJsonRpcRequestForBlockEffectsDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForBlockEffects.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForBlockEffects.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForBlockEffects.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForBroadcastTxAsync can be decoded and re-encoded")
    func testJsonRpcRequestForBroadcastTxAsyncDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForBroadcastTxAsync.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForBroadcastTxAsync.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForBroadcastTxAsync.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForBroadcastTxCommit can be decoded and re-encoded")
    func testJsonRpcRequestForBroadcastTxCommitDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForBroadcastTxCommit.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForBroadcastTxCommit.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForBroadcastTxCommit.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForChanges can be decoded and re-encoded")
    func testJsonRpcRequestForChangesDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForChanges.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForChanges.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForChanges.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForChunk can be decoded and re-encoded")
    func testJsonRpcRequestForChunkDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForChunk.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForChunk.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForChunk.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForClientConfig can be decoded and re-encoded")
    func testJsonRpcRequestForClientConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForClientConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForClientConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForClientConfig.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALChanges can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALChangesDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALChanges.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALChanges.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALChanges.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALChangesInBlock can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALChangesInBlockDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALChangesInBlock.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALChangesInBlock.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALChangesInBlock.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALCongestionLevel can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALCongestionLevelDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALCongestionLevel.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALCongestionLevel.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALCongestionLevel.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALGenesisConfig can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALGenesisConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALGenesisConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALGenesisConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALGenesisConfig.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALLightClientBlockProof can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALLightClientBlockProofDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALLightClientBlockProof.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALLightClientBlockProof.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALLightClientBlockProof.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALLightClientProof can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALLightClientProofDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALLightClientProof.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALLightClientProof.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALLightClientProof.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALMaintenanceWindows can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALMaintenanceWindowsDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALMaintenanceWindows.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALMaintenanceWindows.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALMaintenanceWindows.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALProtocolConfig can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALProtocolConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALProtocolConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALProtocolConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALProtocolConfig.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALReceipt can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALReceiptDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALReceipt.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALReceipt.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALReceipt.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALSplitStorageInfo can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALSplitStorageInfoDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALSplitStorageInfo.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALSplitStorageInfo.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALSplitStorageInfo.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALTxStatus can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALTxStatusDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALTxStatus.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALTxStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALTxStatus.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForEXPERIMENTALValidatorsOrdered can be decoded and re-encoded")
    func testJsonRpcRequestForEXPERIMENTALValidatorsOrderedDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForEXPERIMENTALValidatorsOrdered.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForEXPERIMENTALValidatorsOrdered.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALValidatorsOrdered.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForGasPrice can be decoded and re-encoded")
    func testJsonRpcRequestForGasPriceDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForGasPrice.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForGasPrice.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForGasPrice.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForGenesisConfig can be decoded and re-encoded")
    func testJsonRpcRequestForGenesisConfigDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForGenesisConfig.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForGenesisConfig.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForGenesisConfig.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForHealth can be decoded and re-encoded")
    func testJsonRpcRequestForHealthDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForHealth.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForHealth.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForHealth.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForLightClientProof can be decoded and re-encoded")
    func testJsonRpcRequestForLightClientProofDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForLightClientProof.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForLightClientProof.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForLightClientProof.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForMaintenanceWindows can be decoded and re-encoded")
    func testJsonRpcRequestForMaintenanceWindowsDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForMaintenanceWindows.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForMaintenanceWindows.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForMaintenanceWindows.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForNetworkInfo can be decoded and re-encoded")
    func testJsonRpcRequestForNetworkInfoDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForNetworkInfo.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForNetworkInfo.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForNetworkInfo.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForNextLightClientBlock can be decoded and re-encoded")
    func testJsonRpcRequestForNextLightClientBlockDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForNextLightClientBlock.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForNextLightClientBlock.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForNextLightClientBlock.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForQuery can be decoded and re-encoded")
    func testJsonRpcRequestForQueryDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForQuery.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForQuery.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForQuery.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForSendTx can be decoded and re-encoded")
    func testJsonRpcRequestForSendTxDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForSendTx.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForSendTx.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForSendTx.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForStatus can be decoded and re-encoded")
    func testJsonRpcRequestForStatusDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForStatus.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForStatus.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForStatus.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForTx can be decoded and re-encoded")
    func testJsonRpcRequestForTxDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForTx.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForTx.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForTx.self, from: encoded)
    }
    
    @Test("JsonRpcRequestForValidators can be decoded and re-encoded")
    func testJsonRpcRequestForValidatorsDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcRequestForValidators.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcRequestForValidators.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcRequestForValidators.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForArrayOfRangeOfUint64AndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForArrayOfRangeOfUint64AndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForArrayOfRangeOfUint64AndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForArrayOfRangeOfUint64AndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForArrayOfRangeOfUint64AndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForArrayOfRangeOfUint64AndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForArrayOfRangeOfUint64AndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForArrayOfRangeOfUint64AndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForArrayOfRangeOfUint64AndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForArrayOfRangeOfUint64AndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForArrayOfValidatorStakeViewAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForArrayOfValidatorStakeViewAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForCryptoHashAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForCryptoHashAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForCryptoHashAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForCryptoHashAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForCryptoHashAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForCryptoHashAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForCryptoHashAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForCryptoHashAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForCryptoHashAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForCryptoHashAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForGenesisConfigAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForGenesisConfigAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForGenesisConfigAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForGenesisConfigAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForGenesisConfigAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForGenesisConfigAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForGenesisConfigAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForGenesisConfigAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForGenesisConfigAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForGenesisConfigAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForNullableRpcHealthResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForNullableRpcHealthResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForNullableRpcHealthResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForNullableRpcHealthResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForNullableRpcHealthResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForNullableRpcHealthResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForNullableRpcHealthResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForNullableRpcHealthResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForNullableRpcHealthResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForNullableRpcHealthResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcBlockResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcBlockResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcBlockResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcBlockResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcBlockResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcBlockResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcBlockResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcBlockResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcBlockResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcBlockResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcChunkResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcChunkResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcChunkResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcChunkResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcChunkResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcChunkResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcChunkResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcChunkResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcChunkResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcChunkResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcClientConfigResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcClientConfigResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcClientConfigResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcClientConfigResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcClientConfigResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcClientConfigResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcClientConfigResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcClientConfigResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcClientConfigResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcClientConfigResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcCongestionLevelResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcCongestionLevelResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcCongestionLevelResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcCongestionLevelResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcCongestionLevelResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcCongestionLevelResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcCongestionLevelResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcCongestionLevelResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcCongestionLevelResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcCongestionLevelResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcGasPriceResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcGasPriceResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcGasPriceResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcGasPriceResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcGasPriceResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcGasPriceResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcGasPriceResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcGasPriceResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcGasPriceResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcGasPriceResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcLightClientBlockProofResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcLightClientBlockProofResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcLightClientNextBlockResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcLightClientNextBlockResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcNetworkInfoResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcNetworkInfoResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcNetworkInfoResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcNetworkInfoResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcNetworkInfoResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcNetworkInfoResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcNetworkInfoResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcNetworkInfoResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcNetworkInfoResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcNetworkInfoResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcProtocolConfigResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcProtocolConfigResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcProtocolConfigResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcProtocolConfigResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcProtocolConfigResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcProtocolConfigResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcProtocolConfigResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcProtocolConfigResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcProtocolConfigResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcProtocolConfigResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcQueryResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcQueryResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcQueryResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcQueryResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcQueryResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcQueryResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcQueryResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcQueryResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcQueryResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcQueryResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcReceiptResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcReceiptResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcReceiptResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcReceiptResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcReceiptResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcReceiptResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcReceiptResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcReceiptResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcReceiptResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcReceiptResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcSplitStorageInfoResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcSplitStorageInfoResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcStateChangesInBlockResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcStateChangesInBlockResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcStatusResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcStatusResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcStatusResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcStatusResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcStatusResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcStatusResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcStatusResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcStatusResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcStatusResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcStatusResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcTransactionResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcTransactionResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcTransactionResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcTransactionResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcTransactionResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcTransactionResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcValidatorResponseAndRpcError success response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcValidatorResponseAndRpcErrorSuccessDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcValidatorResponseAndRpcError_Success.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcValidatorResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcValidatorResponseAndRpcError.self, from: encoded)
    }
    
    @Test("JsonRpcResponseForRpcValidatorResponseAndRpcError error response can be decoded and re-encoded")
    func testJsonRpcResponseForRpcValidatorResponseAndRpcErrorErrorDecodingAndEncoding() throws {
        let data = try loadMockJSON("JsonRpcResponseForRpcValidatorResponseAndRpcError_Error.json")
        
        // Test decoding
        let decoded = try decoder.decode(JsonRpcResponseForRpcValidatorResponseAndRpcError.self, from: data)
        
        // Test encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Test round-trip
        _ = try decoder.decode(JsonRpcResponseForRpcValidatorResponseAndRpcError.self, from: encoded)
    }
    
}
