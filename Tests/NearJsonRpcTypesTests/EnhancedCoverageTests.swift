//
// EnhancedCoverageTests.swift
// Enhanced tests with property access for better code coverage
//
// DO NOT EDIT: This file is auto-generated by generate_all_tests.py
//

import Testing
import Foundation
@testable import NearJsonRpcTypes

@Suite("Enhanced Coverage Tests with Property Access")
struct EnhancedCoverageTests {
    
    let decoder: JSONDecoder
    let encoder: JSONEncoder
    
    init() {
        decoder = JSONDecoder()
        decoder.keyDecodingStrategy = .convertFromSnakeCase
        
        encoder = JSONEncoder()
        encoder.keyEncodingStrategy = .convertToSnakeCase
        encoder.outputFormatting = [.prettyPrinted, .sortedKeys]
    }
    
    /// Load mock JSON data from file
    func loadMockJSON(_ filename: String) throws -> Data {
        let testBundle = Bundle.module
        guard let url = testBundle.url(forResource: filename.replacingOccurrences(of: ".json", with: ""), withExtension: "json", subdirectory: "Mock") else {
            throw NSError(domain: "TestError", code: 1, userInfo: [NSLocalizedDescriptionKey: "Mock file not found: \(filename)"])
        }
        return try Data(contentsOf: url)
    }
    
    @Test("AccessKey decoded instance is valid")
    func testAccessKeyValidity() throws {
        let data = try loadMockJSON("AccessKey.json")
        let decoded = try decoder.decode(AccessKey.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AccessKey.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("AccessKeyCreationConfigView decoded instance is valid")
    func testAccessKeyCreationConfigViewValidity() throws {
        let data = try loadMockJSON("AccessKeyCreationConfigView.json")
        let decoded = try decoder.decode(AccessKeyCreationConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AccessKeyCreationConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("AccessKeyInfoView decoded instance is valid")
    func testAccessKeyInfoViewValidity() throws {
        let data = try loadMockJSON("AccessKeyInfoView.json")
        let decoded = try decoder.decode(AccessKeyInfoView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AccessKeyInfoView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("AccessKeyList decoded instance is valid")
    func testAccessKeyListValidity() throws {
        let data = try loadMockJSON("AccessKeyList.json")
        let decoded = try decoder.decode(AccessKeyList.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AccessKeyList.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("AccessKeyPermission variant 0 encoding stability")
    func testAccessKeyPermissionVariant0EncodingStability() throws {
        let data = try loadMockJSON("AccessKeyPermission_Variant0.json")
        let decoded = try decoder.decode(AccessKeyPermission.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(AccessKeyPermission.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("AccessKeyPermission variant 1 encoding stability")
    func testAccessKeyPermissionVariant1EncodingStability() throws {
        let data = try loadMockJSON("AccessKeyPermission_Variant1.json")
        let decoded = try decoder.decode(AccessKeyPermission.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(AccessKeyPermission.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("AccessKeyPermissionView variant 0 encoding stability")
    func testAccessKeyPermissionViewVariant0EncodingStability() throws {
        let data = try loadMockJSON("AccessKeyPermissionView_Variant0.json")
        let decoded = try decoder.decode(AccessKeyPermissionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(AccessKeyPermissionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("AccessKeyPermissionView variant 1 encoding stability")
    func testAccessKeyPermissionViewVariant1EncodingStability() throws {
        let data = try loadMockJSON("AccessKeyPermissionView_Variant1.json")
        let decoded = try decoder.decode(AccessKeyPermissionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(AccessKeyPermissionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("AccessKeyView decoded instance is valid")
    func testAccessKeyViewValidity() throws {
        let data = try loadMockJSON("AccessKeyView.json")
        let decoded = try decoder.decode(AccessKeyView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AccessKeyView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("AccountCreationConfigView decoded instance is valid")
    func testAccountCreationConfigViewValidity() throws {
        let data = try loadMockJSON("AccountCreationConfigView.json")
        let decoded = try decoder.decode(AccountCreationConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AccountCreationConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("AccountDataView decoded instance is valid")
    func testAccountDataViewValidity() throws {
        let data = try loadMockJSON("AccountDataView.json")
        let decoded = try decoder.decode(AccountDataView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AccountDataView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("AccountInfo decoded instance is valid")
    func testAccountInfoValidity() throws {
        let data = try loadMockJSON("AccountInfo.json")
        let decoded = try decoder.decode(AccountInfo.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AccountInfo.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("AccountView decoded instance is valid")
    func testAccountViewValidity() throws {
        let data = try loadMockJSON("AccountView.json")
        let decoded = try decoder.decode(AccountView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AccountView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("AccountWithPublicKey decoded instance is valid")
    func testAccountWithPublicKeyValidity() throws {
        let data = try loadMockJSON("AccountWithPublicKey.json")
        let decoded = try decoder.decode(AccountWithPublicKey.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AccountWithPublicKey.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ActionCreationConfigView decoded instance is valid")
    func testActionCreationConfigViewValidity() throws {
        let data = try loadMockJSON("ActionCreationConfigView.json")
        let decoded = try decoder.decode(ActionCreationConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ActionCreationConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ActionError decoded instance is valid")
    func testActionErrorValidity() throws {
        let data = try loadMockJSON("ActionError.json")
        let decoded = try decoder.decode(ActionError.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ActionError.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ActionErrorKind variant 0 encoding stability")
    func testActionErrorKindVariant0EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant0.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 1 encoding stability")
    func testActionErrorKindVariant1EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant1.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 10 encoding stability")
    func testActionErrorKindVariant10EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant10.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 11 encoding stability")
    func testActionErrorKindVariant11EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant11.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 12 encoding stability")
    func testActionErrorKindVariant12EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant12.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 13 encoding stability")
    func testActionErrorKindVariant13EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant13.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 14 encoding stability")
    func testActionErrorKindVariant14EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant14.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 15 encoding stability")
    func testActionErrorKindVariant15EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant15.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 16 encoding stability")
    func testActionErrorKindVariant16EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant16.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 17 encoding stability")
    func testActionErrorKindVariant17EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant17.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 18 encoding stability")
    func testActionErrorKindVariant18EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant18.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 19 encoding stability")
    func testActionErrorKindVariant19EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant19.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 2 encoding stability")
    func testActionErrorKindVariant2EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant2.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 20 encoding stability")
    func testActionErrorKindVariant20EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant20.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 21 encoding stability")
    func testActionErrorKindVariant21EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant21.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 22 encoding stability")
    func testActionErrorKindVariant22EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant22.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 3 encoding stability")
    func testActionErrorKindVariant3EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant3.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 4 encoding stability")
    func testActionErrorKindVariant4EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant4.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 5 encoding stability")
    func testActionErrorKindVariant5EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant5.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 6 encoding stability")
    func testActionErrorKindVariant6EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant6.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 7 encoding stability")
    func testActionErrorKindVariant7EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant7.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 8 encoding stability")
    func testActionErrorKindVariant8EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant8.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionErrorKind variant 9 encoding stability")
    func testActionErrorKindVariant9EncodingStability() throws {
        let data = try loadMockJSON("ActionErrorKind_Variant9.json")
        let decoded = try decoder.decode(ActionErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 0 encoding stability")
    func testActionViewVariant0EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant0.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 1 encoding stability")
    func testActionViewVariant1EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant1.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 10 encoding stability")
    func testActionViewVariant10EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant10.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 11 encoding stability")
    func testActionViewVariant11EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant11.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 12 encoding stability")
    func testActionViewVariant12EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant12.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 13 encoding stability")
    func testActionViewVariant13EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant13.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 2 encoding stability")
    func testActionViewVariant2EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant2.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 3 encoding stability")
    func testActionViewVariant3EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant3.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 4 encoding stability")
    func testActionViewVariant4EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant4.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 5 encoding stability")
    func testActionViewVariant5EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant5.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 6 encoding stability")
    func testActionViewVariant6EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant6.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 7 encoding stability")
    func testActionViewVariant7EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant7.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 8 encoding stability")
    func testActionViewVariant8EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant8.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionView variant 9 encoding stability")
    func testActionViewVariant9EncodingStability() throws {
        let data = try loadMockJSON("ActionView_Variant9.json")
        let decoded = try decoder.decode(ActionView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 0 encoding stability")
    func testActionsValidationErrorVariant0EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant0.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 1 encoding stability")
    func testActionsValidationErrorVariant1EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant1.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 10 encoding stability")
    func testActionsValidationErrorVariant10EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant10.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 11 encoding stability")
    func testActionsValidationErrorVariant11EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant11.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 12 encoding stability")
    func testActionsValidationErrorVariant12EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant12.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 13 encoding stability")
    func testActionsValidationErrorVariant13EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant13.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 14 encoding stability")
    func testActionsValidationErrorVariant14EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant14.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 15 encoding stability")
    func testActionsValidationErrorVariant15EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant15.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 16 encoding stability")
    func testActionsValidationErrorVariant16EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant16.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 2 encoding stability")
    func testActionsValidationErrorVariant2EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant2.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 3 encoding stability")
    func testActionsValidationErrorVariant3EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant3.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 4 encoding stability")
    func testActionsValidationErrorVariant4EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant4.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 5 encoding stability")
    func testActionsValidationErrorVariant5EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant5.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 6 encoding stability")
    func testActionsValidationErrorVariant6EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant6.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 7 encoding stability")
    func testActionsValidationErrorVariant7EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant7.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 8 encoding stability")
    func testActionsValidationErrorVariant8EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant8.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ActionsValidationError variant 9 encoding stability")
    func testActionsValidationErrorVariant9EncodingStability() throws {
        let data = try loadMockJSON("ActionsValidationError_Variant9.json")
        let decoded = try decoder.decode(ActionsValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ActionsValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("AddKeyAction decoded instance is valid")
    func testAddKeyActionValidity() throws {
        let data = try loadMockJSON("AddKeyAction.json")
        let decoded = try decoder.decode(AddKeyAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(AddKeyAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("BandwidthRequest decoded instance is valid")
    func testBandwidthRequestValidity() throws {
        let data = try loadMockJSON("BandwidthRequest.json")
        let decoded = try decoder.decode(BandwidthRequest.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(BandwidthRequest.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("BandwidthRequestBitmap decoded instance is valid")
    func testBandwidthRequestBitmapValidity() throws {
        let data = try loadMockJSON("BandwidthRequestBitmap.json")
        let decoded = try decoder.decode(BandwidthRequestBitmap.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(BandwidthRequestBitmap.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("BandwidthRequests variant 0 encoding stability")
    func testBandwidthRequestsVariant0EncodingStability() throws {
        let data = try loadMockJSON("BandwidthRequests_Variant0.json")
        let decoded = try decoder.decode(BandwidthRequests.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(BandwidthRequests.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("BandwidthRequestsV1 decoded instance is valid")
    func testBandwidthRequestsV1Validity() throws {
        let data = try loadMockJSON("BandwidthRequestsV1.json")
        let decoded = try decoder.decode(BandwidthRequestsV1.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(BandwidthRequestsV1.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("BlockHeaderInnerLiteView decoded instance is valid")
    func testBlockHeaderInnerLiteViewValidity() throws {
        let data = try loadMockJSON("BlockHeaderInnerLiteView.json")
        let decoded = try decoder.decode(BlockHeaderInnerLiteView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(BlockHeaderInnerLiteView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("BlockHeaderView decoded instance is valid")
    func testBlockHeaderViewValidity() throws {
        let data = try loadMockJSON("BlockHeaderView.json")
        let decoded = try decoder.decode(BlockHeaderView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(BlockHeaderView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("BlockId variant 0 encoding stability")
    func testBlockIdVariant0EncodingStability() throws {
        let data = try loadMockJSON("BlockId_Variant0.json")
        let decoded = try decoder.decode(BlockId.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(BlockId.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("BlockId variant 1 encoding stability")
    func testBlockIdVariant1EncodingStability() throws {
        let data = try loadMockJSON("BlockId_Variant1.json")
        let decoded = try decoder.decode(BlockId.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(BlockId.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("BlockStatusView decoded instance is valid")
    func testBlockStatusViewValidity() throws {
        let data = try loadMockJSON("BlockStatusView.json")
        let decoded = try decoder.decode(BlockStatusView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(BlockStatusView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("CallResult decoded instance is valid")
    func testCallResultValidity() throws {
        let data = try loadMockJSON("CallResult.json")
        let decoded = try decoder.decode(CallResult.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(CallResult.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("CatchupStatusView decoded instance is valid")
    func testCatchupStatusViewValidity() throws {
        let data = try loadMockJSON("CatchupStatusView.json")
        let decoded = try decoder.decode(CatchupStatusView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(CatchupStatusView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ChunkDistributionNetworkConfig decoded instance is valid")
    func testChunkDistributionNetworkConfigValidity() throws {
        let data = try loadMockJSON("ChunkDistributionNetworkConfig.json")
        let decoded = try decoder.decode(ChunkDistributionNetworkConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ChunkDistributionNetworkConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ChunkDistributionUris decoded instance is valid")
    func testChunkDistributionUrisValidity() throws {
        let data = try loadMockJSON("ChunkDistributionUris.json")
        let decoded = try decoder.decode(ChunkDistributionUris.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ChunkDistributionUris.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ChunkHeaderView decoded instance is valid")
    func testChunkHeaderViewValidity() throws {
        let data = try loadMockJSON("ChunkHeaderView.json")
        let decoded = try decoder.decode(ChunkHeaderView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ChunkHeaderView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("CloudArchivalReaderConfig decoded instance is valid")
    func testCloudArchivalReaderConfigValidity() throws {
        let data = try loadMockJSON("CloudArchivalReaderConfig.json")
        let decoded = try decoder.decode(CloudArchivalReaderConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(CloudArchivalReaderConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("CloudArchivalWriterConfig decoded instance is valid")
    func testCloudArchivalWriterConfigValidity() throws {
        let data = try loadMockJSON("CloudArchivalWriterConfig.json")
        let decoded = try decoder.decode(CloudArchivalWriterConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(CloudArchivalWriterConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("CloudStorageConfig decoded instance is valid")
    func testCloudStorageConfigValidity() throws {
        let data = try loadMockJSON("CloudStorageConfig.json")
        let decoded = try decoder.decode(CloudStorageConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(CloudStorageConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("CompilationError variant 0 encoding stability")
    func testCompilationErrorVariant0EncodingStability() throws {
        let data = try loadMockJSON("CompilationError_Variant0.json")
        let decoded = try decoder.decode(CompilationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(CompilationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("CompilationError variant 1 encoding stability")
    func testCompilationErrorVariant1EncodingStability() throws {
        let data = try loadMockJSON("CompilationError_Variant1.json")
        let decoded = try decoder.decode(CompilationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(CompilationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("CompilationError variant 2 encoding stability")
    func testCompilationErrorVariant2EncodingStability() throws {
        let data = try loadMockJSON("CompilationError_Variant2.json")
        let decoded = try decoder.decode(CompilationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(CompilationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("CongestionControlConfigView decoded instance is valid")
    func testCongestionControlConfigViewValidity() throws {
        let data = try loadMockJSON("CongestionControlConfigView.json")
        let decoded = try decoder.decode(CongestionControlConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(CongestionControlConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("CongestionInfoView decoded instance is valid")
    func testCongestionInfoViewValidity() throws {
        let data = try loadMockJSON("CongestionInfoView.json")
        let decoded = try decoder.decode(CongestionInfoView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(CongestionInfoView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ContractCodeView decoded instance is valid")
    func testContractCodeViewValidity() throws {
        let data = try loadMockJSON("ContractCodeView.json")
        let decoded = try decoder.decode(ContractCodeView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ContractCodeView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("CostGasUsed decoded instance is valid")
    func testCostGasUsedValidity() throws {
        let data = try loadMockJSON("CostGasUsed.json")
        let decoded = try decoder.decode(CostGasUsed.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(CostGasUsed.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("CurrentEpochValidatorInfo decoded instance is valid")
    func testCurrentEpochValidatorInfoValidity() throws {
        let data = try loadMockJSON("CurrentEpochValidatorInfo.json")
        let decoded = try decoder.decode(CurrentEpochValidatorInfo.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(CurrentEpochValidatorInfo.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DataReceiptCreationConfigView decoded instance is valid")
    func testDataReceiptCreationConfigViewValidity() throws {
        let data = try loadMockJSON("DataReceiptCreationConfigView.json")
        let decoded = try decoder.decode(DataReceiptCreationConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DataReceiptCreationConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DataReceiverView decoded instance is valid")
    func testDataReceiverViewValidity() throws {
        let data = try loadMockJSON("DataReceiverView.json")
        let decoded = try decoder.decode(DataReceiverView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DataReceiverView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DelegateAction decoded instance is valid")
    func testDelegateActionValidity() throws {
        let data = try loadMockJSON("DelegateAction.json")
        let decoded = try decoder.decode(DelegateAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DelegateAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DeleteAccountAction decoded instance is valid")
    func testDeleteAccountActionValidity() throws {
        let data = try loadMockJSON("DeleteAccountAction.json")
        let decoded = try decoder.decode(DeleteAccountAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DeleteAccountAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DeleteKeyAction decoded instance is valid")
    func testDeleteKeyActionValidity() throws {
        let data = try loadMockJSON("DeleteKeyAction.json")
        let decoded = try decoder.decode(DeleteKeyAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DeleteKeyAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DeployContractAction decoded instance is valid")
    func testDeployContractActionValidity() throws {
        let data = try loadMockJSON("DeployContractAction.json")
        let decoded = try decoder.decode(DeployContractAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DeployContractAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DeployGlobalContractAction decoded instance is valid")
    func testDeployGlobalContractActionValidity() throws {
        let data = try loadMockJSON("DeployGlobalContractAction.json")
        let decoded = try decoder.decode(DeployGlobalContractAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DeployGlobalContractAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DetailedDebugStatus decoded instance is valid")
    func testDetailedDebugStatusValidity() throws {
        let data = try loadMockJSON("DetailedDebugStatus.json")
        let decoded = try decoder.decode(DetailedDebugStatus.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DetailedDebugStatus.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DeterministicAccountStateInit variant 0 encoding stability")
    func testDeterministicAccountStateInitVariant0EncodingStability() throws {
        let data = try loadMockJSON("DeterministicAccountStateInit_Variant0.json")
        let decoded = try decoder.decode(DeterministicAccountStateInit.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(DeterministicAccountStateInit.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("DeterministicAccountStateInitV1 decoded instance is valid")
    func testDeterministicAccountStateInitV1Validity() throws {
        let data = try loadMockJSON("DeterministicAccountStateInitV1.json")
        let decoded = try decoder.decode(DeterministicAccountStateInitV1.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DeterministicAccountStateInitV1.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DeterministicStateInitAction decoded instance is valid")
    func testDeterministicStateInitActionValidity() throws {
        let data = try loadMockJSON("DeterministicStateInitAction.json")
        let decoded = try decoder.decode(DeterministicStateInitAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DeterministicStateInitAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DumpConfig decoded instance is valid")
    func testDumpConfigValidity() throws {
        let data = try loadMockJSON("DumpConfig.json")
        let decoded = try decoder.decode(DumpConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DumpConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("DurationAsStdSchemaProvider decoded instance is valid")
    func testDurationAsStdSchemaProviderValidity() throws {
        let data = try loadMockJSON("DurationAsStdSchemaProvider.json")
        let decoded = try decoder.decode(DurationAsStdSchemaProvider.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(DurationAsStdSchemaProvider.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("EpochSyncConfig decoded instance is valid")
    func testEpochSyncConfigValidity() throws {
        let data = try loadMockJSON("EpochSyncConfig.json")
        let decoded = try decoder.decode(EpochSyncConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(EpochSyncConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ExecutionMetadataView decoded instance is valid")
    func testExecutionMetadataViewValidity() throws {
        let data = try loadMockJSON("ExecutionMetadataView.json")
        let decoded = try decoder.decode(ExecutionMetadataView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ExecutionMetadataView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ExecutionOutcomeView decoded instance is valid")
    func testExecutionOutcomeViewValidity() throws {
        let data = try loadMockJSON("ExecutionOutcomeView.json")
        let decoded = try decoder.decode(ExecutionOutcomeView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ExecutionOutcomeView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ExecutionOutcomeWithIdView decoded instance is valid")
    func testExecutionOutcomeWithIdViewValidity() throws {
        let data = try loadMockJSON("ExecutionOutcomeWithIdView.json")
        let decoded = try decoder.decode(ExecutionOutcomeWithIdView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ExecutionOutcomeWithIdView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ExecutionStatusView variant 0 encoding stability")
    func testExecutionStatusViewVariant0EncodingStability() throws {
        let data = try loadMockJSON("ExecutionStatusView_Variant0.json")
        let decoded = try decoder.decode(ExecutionStatusView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ExecutionStatusView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ExecutionStatusView variant 1 encoding stability")
    func testExecutionStatusViewVariant1EncodingStability() throws {
        let data = try loadMockJSON("ExecutionStatusView_Variant1.json")
        let decoded = try decoder.decode(ExecutionStatusView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ExecutionStatusView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ExecutionStatusView variant 2 encoding stability")
    func testExecutionStatusViewVariant2EncodingStability() throws {
        let data = try loadMockJSON("ExecutionStatusView_Variant2.json")
        let decoded = try decoder.decode(ExecutionStatusView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ExecutionStatusView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ExecutionStatusView variant 3 encoding stability")
    func testExecutionStatusViewVariant3EncodingStability() throws {
        let data = try loadMockJSON("ExecutionStatusView_Variant3.json")
        let decoded = try decoder.decode(ExecutionStatusView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ExecutionStatusView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ExtCostsConfigView decoded instance is valid")
    func testExtCostsConfigViewValidity() throws {
        let data = try loadMockJSON("ExtCostsConfigView.json")
        let decoded = try decoder.decode(ExtCostsConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ExtCostsConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ExternalStorageConfig decoded instance is valid")
    func testExternalStorageConfigValidity() throws {
        let data = try loadMockJSON("ExternalStorageConfig.json")
        let decoded = try decoder.decode(ExternalStorageConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ExternalStorageConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ExternalStorageLocation variant 0 encoding stability")
    func testExternalStorageLocationVariant0EncodingStability() throws {
        let data = try loadMockJSON("ExternalStorageLocation_Variant0.json")
        let decoded = try decoder.decode(ExternalStorageLocation.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ExternalStorageLocation.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ExternalStorageLocation variant 1 encoding stability")
    func testExternalStorageLocationVariant1EncodingStability() throws {
        let data = try loadMockJSON("ExternalStorageLocation_Variant1.json")
        let decoded = try decoder.decode(ExternalStorageLocation.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ExternalStorageLocation.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ExternalStorageLocation variant 2 encoding stability")
    func testExternalStorageLocationVariant2EncodingStability() throws {
        let data = try loadMockJSON("ExternalStorageLocation_Variant2.json")
        let decoded = try decoder.decode(ExternalStorageLocation.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ExternalStorageLocation.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("Fee decoded instance is valid")
    func testFeeValidity() throws {
        let data = try loadMockJSON("Fee.json")
        let decoded = try decoder.decode(Fee.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(Fee.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("FinalExecutionOutcomeView decoded instance is valid")
    func testFinalExecutionOutcomeViewValidity() throws {
        let data = try loadMockJSON("FinalExecutionOutcomeView.json")
        let decoded = try decoder.decode(FinalExecutionOutcomeView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(FinalExecutionOutcomeView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("FinalExecutionOutcomeWithReceiptView decoded instance is valid")
    func testFinalExecutionOutcomeWithReceiptViewValidity() throws {
        let data = try loadMockJSON("FinalExecutionOutcomeWithReceiptView.json")
        let decoded = try decoder.decode(FinalExecutionOutcomeWithReceiptView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(FinalExecutionOutcomeWithReceiptView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("FinalExecutionStatus variant 0 encoding stability")
    func testFinalExecutionStatusVariant0EncodingStability() throws {
        let data = try loadMockJSON("FinalExecutionStatus_Variant0.json")
        let decoded = try decoder.decode(FinalExecutionStatus.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FinalExecutionStatus.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FinalExecutionStatus variant 1 encoding stability")
    func testFinalExecutionStatusVariant1EncodingStability() throws {
        let data = try loadMockJSON("FinalExecutionStatus_Variant1.json")
        let decoded = try decoder.decode(FinalExecutionStatus.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FinalExecutionStatus.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FinalExecutionStatus variant 2 encoding stability")
    func testFinalExecutionStatusVariant2EncodingStability() throws {
        let data = try loadMockJSON("FinalExecutionStatus_Variant2.json")
        let decoded = try decoder.decode(FinalExecutionStatus.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FinalExecutionStatus.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FinalExecutionStatus variant 3 encoding stability")
    func testFinalExecutionStatusVariant3EncodingStability() throws {
        let data = try loadMockJSON("FinalExecutionStatus_Variant3.json")
        let decoded = try decoder.decode(FinalExecutionStatus.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FinalExecutionStatus.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FunctionCallAction decoded instance is valid")
    func testFunctionCallActionValidity() throws {
        let data = try loadMockJSON("FunctionCallAction.json")
        let decoded = try decoder.decode(FunctionCallAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(FunctionCallAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("FunctionCallError variant 0 encoding stability")
    func testFunctionCallErrorVariant0EncodingStability() throws {
        let data = try loadMockJSON("FunctionCallError_Variant0.json")
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FunctionCallError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FunctionCallError variant 1 encoding stability")
    func testFunctionCallErrorVariant1EncodingStability() throws {
        let data = try loadMockJSON("FunctionCallError_Variant1.json")
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FunctionCallError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FunctionCallError variant 2 encoding stability")
    func testFunctionCallErrorVariant2EncodingStability() throws {
        let data = try loadMockJSON("FunctionCallError_Variant2.json")
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FunctionCallError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FunctionCallError variant 3 encoding stability")
    func testFunctionCallErrorVariant3EncodingStability() throws {
        let data = try loadMockJSON("FunctionCallError_Variant3.json")
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FunctionCallError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FunctionCallError variant 4 encoding stability")
    func testFunctionCallErrorVariant4EncodingStability() throws {
        let data = try loadMockJSON("FunctionCallError_Variant4.json")
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FunctionCallError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FunctionCallError variant 5 encoding stability")
    func testFunctionCallErrorVariant5EncodingStability() throws {
        let data = try loadMockJSON("FunctionCallError_Variant5.json")
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FunctionCallError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FunctionCallError variant 6 encoding stability")
    func testFunctionCallErrorVariant6EncodingStability() throws {
        let data = try loadMockJSON("FunctionCallError_Variant6.json")
        let decoded = try decoder.decode(FunctionCallError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(FunctionCallError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("FunctionCallPermission decoded instance is valid")
    func testFunctionCallPermissionValidity() throws {
        let data = try loadMockJSON("FunctionCallPermission.json")
        let decoded = try decoder.decode(FunctionCallPermission.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(FunctionCallPermission.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("GCConfig decoded instance is valid")
    func testGCConfigValidity() throws {
        let data = try loadMockJSON("GCConfig.json")
        let decoded = try decoder.decode(GCConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(GCConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("GasKeyView decoded instance is valid")
    func testGasKeyViewValidity() throws {
        let data = try loadMockJSON("GasKeyView.json")
        let decoded = try decoder.decode(GasKeyView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(GasKeyView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("GenesisConfig decoded instance is valid")
    func testGenesisConfigValidity() throws {
        let data = try loadMockJSON("GenesisConfig.json")
        let decoded = try decoder.decode(GenesisConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(GenesisConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("GlobalContractDeployMode variant 0 encoding stability")
    func testGlobalContractDeployModeVariant0EncodingStability() throws {
        let data = try loadMockJSON("GlobalContractDeployMode_Variant0.json")
        let decoded = try decoder.decode(GlobalContractDeployMode.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(GlobalContractDeployMode.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("GlobalContractDeployMode variant 1 encoding stability")
    func testGlobalContractDeployModeVariant1EncodingStability() throws {
        let data = try loadMockJSON("GlobalContractDeployMode_Variant1.json")
        let decoded = try decoder.decode(GlobalContractDeployMode.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(GlobalContractDeployMode.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("GlobalContractIdentifier variant 0 encoding stability")
    func testGlobalContractIdentifierVariant0EncodingStability() throws {
        let data = try loadMockJSON("GlobalContractIdentifier_Variant0.json")
        let decoded = try decoder.decode(GlobalContractIdentifier.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(GlobalContractIdentifier.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("GlobalContractIdentifier variant 1 encoding stability")
    func testGlobalContractIdentifierVariant1EncodingStability() throws {
        let data = try loadMockJSON("GlobalContractIdentifier_Variant1.json")
        let decoded = try decoder.decode(GlobalContractIdentifier.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(GlobalContractIdentifier.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("GlobalContractIdentifierView variant 0 encoding stability")
    func testGlobalContractIdentifierViewVariant0EncodingStability() throws {
        let data = try loadMockJSON("GlobalContractIdentifierView_Variant0.json")
        let decoded = try decoder.decode(GlobalContractIdentifierView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(GlobalContractIdentifierView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("GlobalContractIdentifierView variant 1 encoding stability")
    func testGlobalContractIdentifierViewVariant1EncodingStability() throws {
        let data = try loadMockJSON("GlobalContractIdentifierView_Variant1.json")
        let decoded = try decoder.decode(GlobalContractIdentifierView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(GlobalContractIdentifierView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 0 encoding stability")
    func testHostErrorVariant0EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant0.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 1 encoding stability")
    func testHostErrorVariant1EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant1.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 10 encoding stability")
    func testHostErrorVariant10EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant10.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 11 encoding stability")
    func testHostErrorVariant11EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant11.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 12 encoding stability")
    func testHostErrorVariant12EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant12.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 13 encoding stability")
    func testHostErrorVariant13EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant13.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 14 encoding stability")
    func testHostErrorVariant14EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant14.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 15 encoding stability")
    func testHostErrorVariant15EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant15.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 16 encoding stability")
    func testHostErrorVariant16EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant16.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 17 encoding stability")
    func testHostErrorVariant17EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant17.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 18 encoding stability")
    func testHostErrorVariant18EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant18.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 19 encoding stability")
    func testHostErrorVariant19EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant19.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 2 encoding stability")
    func testHostErrorVariant2EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant2.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 20 encoding stability")
    func testHostErrorVariant20EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant20.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 21 encoding stability")
    func testHostErrorVariant21EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant21.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 22 encoding stability")
    func testHostErrorVariant22EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant22.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 23 encoding stability")
    func testHostErrorVariant23EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant23.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 24 encoding stability")
    func testHostErrorVariant24EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant24.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 25 encoding stability")
    func testHostErrorVariant25EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant25.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 26 encoding stability")
    func testHostErrorVariant26EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant26.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 27 encoding stability")
    func testHostErrorVariant27EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant27.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 28 encoding stability")
    func testHostErrorVariant28EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant28.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 29 encoding stability")
    func testHostErrorVariant29EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant29.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 3 encoding stability")
    func testHostErrorVariant3EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant3.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 30 encoding stability")
    func testHostErrorVariant30EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant30.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 31 encoding stability")
    func testHostErrorVariant31EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant31.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 32 encoding stability")
    func testHostErrorVariant32EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant32.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 4 encoding stability")
    func testHostErrorVariant4EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant4.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 5 encoding stability")
    func testHostErrorVariant5EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant5.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 6 encoding stability")
    func testHostErrorVariant6EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant6.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 7 encoding stability")
    func testHostErrorVariant7EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant7.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 8 encoding stability")
    func testHostErrorVariant8EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant8.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("HostError variant 9 encoding stability")
    func testHostErrorVariant9EncodingStability() throws {
        let data = try loadMockJSON("HostError_Variant9.json")
        let decoded = try decoder.decode(HostError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(HostError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidAccessKeyError variant 0 encoding stability")
    func testInvalidAccessKeyErrorVariant0EncodingStability() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant0.json")
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidAccessKeyError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidAccessKeyError variant 1 encoding stability")
    func testInvalidAccessKeyErrorVariant1EncodingStability() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant1.json")
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidAccessKeyError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidAccessKeyError variant 2 encoding stability")
    func testInvalidAccessKeyErrorVariant2EncodingStability() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant2.json")
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidAccessKeyError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidAccessKeyError variant 3 encoding stability")
    func testInvalidAccessKeyErrorVariant3EncodingStability() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant3.json")
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidAccessKeyError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidAccessKeyError variant 4 encoding stability")
    func testInvalidAccessKeyErrorVariant4EncodingStability() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant4.json")
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidAccessKeyError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidAccessKeyError variant 5 encoding stability")
    func testInvalidAccessKeyErrorVariant5EncodingStability() throws {
        let data = try loadMockJSON("InvalidAccessKeyError_Variant5.json")
        let decoded = try decoder.decode(InvalidAccessKeyError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidAccessKeyError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 0 encoding stability")
    func testInvalidTxErrorVariant0EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant0.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 1 encoding stability")
    func testInvalidTxErrorVariant1EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant1.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 10 encoding stability")
    func testInvalidTxErrorVariant10EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant10.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 11 encoding stability")
    func testInvalidTxErrorVariant11EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant11.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 12 encoding stability")
    func testInvalidTxErrorVariant12EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant12.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 13 encoding stability")
    func testInvalidTxErrorVariant13EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant13.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 14 encoding stability")
    func testInvalidTxErrorVariant14EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant14.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 15 encoding stability")
    func testInvalidTxErrorVariant15EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant15.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 16 encoding stability")
    func testInvalidTxErrorVariant16EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant16.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 17 encoding stability")
    func testInvalidTxErrorVariant17EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant17.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 2 encoding stability")
    func testInvalidTxErrorVariant2EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant2.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 3 encoding stability")
    func testInvalidTxErrorVariant3EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant3.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 4 encoding stability")
    func testInvalidTxErrorVariant4EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant4.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 5 encoding stability")
    func testInvalidTxErrorVariant5EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant5.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 6 encoding stability")
    func testInvalidTxErrorVariant6EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant6.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 7 encoding stability")
    func testInvalidTxErrorVariant7EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant7.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 8 encoding stability")
    func testInvalidTxErrorVariant8EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant8.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("InvalidTxError variant 9 encoding stability")
    func testInvalidTxErrorVariant9EncodingStability() throws {
        let data = try loadMockJSON("InvalidTxError_Variant9.json")
        let decoded = try decoder.decode(InvalidTxError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(InvalidTxError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("KnownProducerView decoded instance is valid")
    func testKnownProducerViewValidity() throws {
        let data = try loadMockJSON("KnownProducerView.json")
        let decoded = try decoder.decode(KnownProducerView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(KnownProducerView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("LightClientBlockLiteView decoded instance is valid")
    func testLightClientBlockLiteViewValidity() throws {
        let data = try loadMockJSON("LightClientBlockLiteView.json")
        let decoded = try decoder.decode(LightClientBlockLiteView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(LightClientBlockLiteView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("LimitConfig decoded instance is valid")
    func testLimitConfigValidity() throws {
        let data = try loadMockJSON("LimitConfig.json")
        let decoded = try decoder.decode(LimitConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(LimitConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("MerklePathItem decoded instance is valid")
    func testMerklePathItemValidity() throws {
        let data = try loadMockJSON("MerklePathItem.json")
        let decoded = try decoder.decode(MerklePathItem.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(MerklePathItem.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("MissingTrieValue decoded instance is valid")
    func testMissingTrieValueValidity() throws {
        let data = try loadMockJSON("MissingTrieValue.json")
        let decoded = try decoder.decode(MissingTrieValue.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(MissingTrieValue.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("MissingTrieValueContext variant 0 encoding stability")
    func testMissingTrieValueContextVariant0EncodingStability() throws {
        let data = try loadMockJSON("MissingTrieValueContext_Variant0.json")
        let decoded = try decoder.decode(MissingTrieValueContext.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(MissingTrieValueContext.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("MissingTrieValueContext variant 1 encoding stability")
    func testMissingTrieValueContextVariant1EncodingStability() throws {
        let data = try loadMockJSON("MissingTrieValueContext_Variant1.json")
        let decoded = try decoder.decode(MissingTrieValueContext.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(MissingTrieValueContext.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("MissingTrieValueContext variant 2 encoding stability")
    func testMissingTrieValueContextVariant2EncodingStability() throws {
        let data = try loadMockJSON("MissingTrieValueContext_Variant2.json")
        let decoded = try decoder.decode(MissingTrieValueContext.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(MissingTrieValueContext.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("MissingTrieValueContext variant 3 encoding stability")
    func testMissingTrieValueContextVariant3EncodingStability() throws {
        let data = try loadMockJSON("MissingTrieValueContext_Variant3.json")
        let decoded = try decoder.decode(MissingTrieValueContext.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(MissingTrieValueContext.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NetworkInfoView decoded instance is valid")
    func testNetworkInfoViewValidity() throws {
        let data = try loadMockJSON("NetworkInfoView.json")
        let decoded = try decoder.decode(NetworkInfoView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(NetworkInfoView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("NextEpochValidatorInfo decoded instance is valid")
    func testNextEpochValidatorInfoValidity() throws {
        let data = try loadMockJSON("NextEpochValidatorInfo.json")
        let decoded = try decoder.decode(NextEpochValidatorInfo.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(NextEpochValidatorInfo.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("NonDelegateAction variant 0 encoding stability")
    func testNonDelegateActionVariant0EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant0.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NonDelegateAction variant 1 encoding stability")
    func testNonDelegateActionVariant1EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant1.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NonDelegateAction variant 10 encoding stability")
    func testNonDelegateActionVariant10EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant10.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NonDelegateAction variant 2 encoding stability")
    func testNonDelegateActionVariant2EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant2.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NonDelegateAction variant 3 encoding stability")
    func testNonDelegateActionVariant3EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant3.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NonDelegateAction variant 4 encoding stability")
    func testNonDelegateActionVariant4EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant4.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NonDelegateAction variant 5 encoding stability")
    func testNonDelegateActionVariant5EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant5.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NonDelegateAction variant 6 encoding stability")
    func testNonDelegateActionVariant6EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant6.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NonDelegateAction variant 7 encoding stability")
    func testNonDelegateActionVariant7EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant7.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NonDelegateAction variant 8 encoding stability")
    func testNonDelegateActionVariant8EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant8.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("NonDelegateAction variant 9 encoding stability")
    func testNonDelegateActionVariant9EncodingStability() throws {
        let data = try loadMockJSON("NonDelegateAction_Variant9.json")
        let decoded = try decoder.decode(NonDelegateAction.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(NonDelegateAction.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PeerInfoView decoded instance is valid")
    func testPeerInfoViewValidity() throws {
        let data = try loadMockJSON("PeerInfoView.json")
        let decoded = try decoder.decode(PeerInfoView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(PeerInfoView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("PrepareError variant 0 encoding stability")
    func testPrepareErrorVariant0EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant0.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PrepareError variant 1 encoding stability")
    func testPrepareErrorVariant1EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant1.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PrepareError variant 10 encoding stability")
    func testPrepareErrorVariant10EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant10.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PrepareError variant 2 encoding stability")
    func testPrepareErrorVariant2EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant2.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PrepareError variant 3 encoding stability")
    func testPrepareErrorVariant3EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant3.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PrepareError variant 4 encoding stability")
    func testPrepareErrorVariant4EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant4.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PrepareError variant 5 encoding stability")
    func testPrepareErrorVariant5EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant5.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PrepareError variant 6 encoding stability")
    func testPrepareErrorVariant6EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant6.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PrepareError variant 7 encoding stability")
    func testPrepareErrorVariant7EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant7.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PrepareError variant 8 encoding stability")
    func testPrepareErrorVariant8EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant8.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("PrepareError variant 9 encoding stability")
    func testPrepareErrorVariant9EncodingStability() throws {
        let data = try loadMockJSON("PrepareError_Variant9.json")
        let decoded = try decoder.decode(PrepareError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(PrepareError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RangeOfUint64 decoded instance is valid")
    func testRangeOfUint64Validity() throws {
        let data = try loadMockJSON("RangeOfUint64.json")
        let decoded = try decoder.decode(RangeOfUint64.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RangeOfUint64.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ReceiptEnumView variant 0 encoding stability")
    func testReceiptEnumViewVariant0EncodingStability() throws {
        let data = try loadMockJSON("ReceiptEnumView_Variant0.json")
        let decoded = try decoder.decode(ReceiptEnumView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptEnumView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptEnumView variant 1 encoding stability")
    func testReceiptEnumViewVariant1EncodingStability() throws {
        let data = try loadMockJSON("ReceiptEnumView_Variant1.json")
        let decoded = try decoder.decode(ReceiptEnumView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptEnumView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptEnumView variant 2 encoding stability")
    func testReceiptEnumViewVariant2EncodingStability() throws {
        let data = try loadMockJSON("ReceiptEnumView_Variant2.json")
        let decoded = try decoder.decode(ReceiptEnumView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptEnumView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptValidationError variant 0 encoding stability")
    func testReceiptValidationErrorVariant0EncodingStability() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant0.json")
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptValidationError variant 1 encoding stability")
    func testReceiptValidationErrorVariant1EncodingStability() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant1.json")
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptValidationError variant 2 encoding stability")
    func testReceiptValidationErrorVariant2EncodingStability() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant2.json")
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptValidationError variant 3 encoding stability")
    func testReceiptValidationErrorVariant3EncodingStability() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant3.json")
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptValidationError variant 4 encoding stability")
    func testReceiptValidationErrorVariant4EncodingStability() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant4.json")
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptValidationError variant 5 encoding stability")
    func testReceiptValidationErrorVariant5EncodingStability() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant5.json")
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptValidationError variant 6 encoding stability")
    func testReceiptValidationErrorVariant6EncodingStability() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant6.json")
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptValidationError variant 7 encoding stability")
    func testReceiptValidationErrorVariant7EncodingStability() throws {
        let data = try loadMockJSON("ReceiptValidationError_Variant7.json")
        let decoded = try decoder.decode(ReceiptValidationError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ReceiptValidationError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ReceiptView decoded instance is valid")
    func testReceiptViewValidity() throws {
        let data = try loadMockJSON("ReceiptView.json")
        let decoded = try decoder.decode(ReceiptView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ReceiptView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcBlockRequest variant 0 encoding stability")
    func testRpcBlockRequestVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcBlockRequest_Variant0.json")
        let decoded = try decoder.decode(RpcBlockRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcBlockRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcBlockRequest variant 1 encoding stability")
    func testRpcBlockRequestVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcBlockRequest_Variant1.json")
        let decoded = try decoder.decode(RpcBlockRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcBlockRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcBlockRequest variant 2 encoding stability")
    func testRpcBlockRequestVariant2EncodingStability() throws {
        let data = try loadMockJSON("RpcBlockRequest_Variant2.json")
        let decoded = try decoder.decode(RpcBlockRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcBlockRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcBlockResponse decoded instance is valid")
    func testRpcBlockResponseValidity() throws {
        let data = try loadMockJSON("RpcBlockResponse.json")
        let decoded = try decoder.decode(RpcBlockResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcBlockResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcChunkRequest variant 0 encoding stability")
    func testRpcChunkRequestVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcChunkRequest_Variant0.json")
        let decoded = try decoder.decode(RpcChunkRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcChunkRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcChunkRequest variant 1 encoding stability")
    func testRpcChunkRequestVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcChunkRequest_Variant1.json")
        let decoded = try decoder.decode(RpcChunkRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcChunkRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcChunkResponse decoded instance is valid")
    func testRpcChunkResponseValidity() throws {
        let data = try loadMockJSON("RpcChunkResponse.json")
        let decoded = try decoder.decode(RpcChunkResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcChunkResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcCongestionLevelRequest variant 0 encoding stability")
    func testRpcCongestionLevelRequestVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcCongestionLevelRequest_Variant0.json")
        let decoded = try decoder.decode(RpcCongestionLevelRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcCongestionLevelRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcCongestionLevelRequest variant 1 encoding stability")
    func testRpcCongestionLevelRequestVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcCongestionLevelRequest_Variant1.json")
        let decoded = try decoder.decode(RpcCongestionLevelRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcCongestionLevelRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcCongestionLevelResponse decoded instance is valid")
    func testRpcCongestionLevelResponseValidity() throws {
        let data = try loadMockJSON("RpcCongestionLevelResponse.json")
        let decoded = try decoder.decode(RpcCongestionLevelResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcCongestionLevelResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcGasPriceRequest decoded instance is valid")
    func testRpcGasPriceRequestValidity() throws {
        let data = try loadMockJSON("RpcGasPriceRequest.json")
        let decoded = try decoder.decode(RpcGasPriceRequest.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcGasPriceRequest.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcGasPriceResponse decoded instance is valid")
    func testRpcGasPriceResponseValidity() throws {
        let data = try loadMockJSON("RpcGasPriceResponse.json")
        let decoded = try decoder.decode(RpcGasPriceResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcGasPriceResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcKnownProducer decoded instance is valid")
    func testRpcKnownProducerValidity() throws {
        let data = try loadMockJSON("RpcKnownProducer.json")
        let decoded = try decoder.decode(RpcKnownProducer.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcKnownProducer.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcLightClientBlockProofRequest decoded instance is valid")
    func testRpcLightClientBlockProofRequestValidity() throws {
        let data = try loadMockJSON("RpcLightClientBlockProofRequest.json")
        let decoded = try decoder.decode(RpcLightClientBlockProofRequest.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcLightClientBlockProofRequest.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcLightClientBlockProofResponse decoded instance is valid")
    func testRpcLightClientBlockProofResponseValidity() throws {
        let data = try loadMockJSON("RpcLightClientBlockProofResponse.json")
        let decoded = try decoder.decode(RpcLightClientBlockProofResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcLightClientBlockProofResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcLightClientExecutionProofRequest variant 0 encoding stability")
    func testRpcLightClientExecutionProofRequestVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcLightClientExecutionProofRequest_Variant0.json")
        let decoded = try decoder.decode(RpcLightClientExecutionProofRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcLightClientExecutionProofRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcLightClientExecutionProofRequest variant 1 encoding stability")
    func testRpcLightClientExecutionProofRequestVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcLightClientExecutionProofRequest_Variant1.json")
        let decoded = try decoder.decode(RpcLightClientExecutionProofRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcLightClientExecutionProofRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcLightClientExecutionProofResponse decoded instance is valid")
    func testRpcLightClientExecutionProofResponseValidity() throws {
        let data = try loadMockJSON("RpcLightClientExecutionProofResponse.json")
        let decoded = try decoder.decode(RpcLightClientExecutionProofResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcLightClientExecutionProofResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcLightClientNextBlockRequest decoded instance is valid")
    func testRpcLightClientNextBlockRequestValidity() throws {
        let data = try loadMockJSON("RpcLightClientNextBlockRequest.json")
        let decoded = try decoder.decode(RpcLightClientNextBlockRequest.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcLightClientNextBlockRequest.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcLightClientNextBlockResponse decoded instance is valid")
    func testRpcLightClientNextBlockResponseValidity() throws {
        let data = try loadMockJSON("RpcLightClientNextBlockResponse.json")
        let decoded = try decoder.decode(RpcLightClientNextBlockResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcLightClientNextBlockResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcMaintenanceWindowsRequest decoded instance is valid")
    func testRpcMaintenanceWindowsRequestValidity() throws {
        let data = try loadMockJSON("RpcMaintenanceWindowsRequest.json")
        let decoded = try decoder.decode(RpcMaintenanceWindowsRequest.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcMaintenanceWindowsRequest.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcNetworkInfoResponse decoded instance is valid")
    func testRpcNetworkInfoResponseValidity() throws {
        let data = try loadMockJSON("RpcNetworkInfoResponse.json")
        let decoded = try decoder.decode(RpcNetworkInfoResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcNetworkInfoResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcPeerInfo decoded instance is valid")
    func testRpcPeerInfoValidity() throws {
        let data = try loadMockJSON("RpcPeerInfo.json")
        let decoded = try decoder.decode(RpcPeerInfo.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcPeerInfo.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcProtocolConfigRequest variant 0 encoding stability")
    func testRpcProtocolConfigRequestVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcProtocolConfigRequest_Variant0.json")
        let decoded = try decoder.decode(RpcProtocolConfigRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcProtocolConfigRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcProtocolConfigRequest variant 1 encoding stability")
    func testRpcProtocolConfigRequestVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcProtocolConfigRequest_Variant1.json")
        let decoded = try decoder.decode(RpcProtocolConfigRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcProtocolConfigRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcProtocolConfigRequest variant 2 encoding stability")
    func testRpcProtocolConfigRequestVariant2EncodingStability() throws {
        let data = try loadMockJSON("RpcProtocolConfigRequest_Variant2.json")
        let decoded = try decoder.decode(RpcProtocolConfigRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcProtocolConfigRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcProtocolConfigResponse decoded instance is valid")
    func testRpcProtocolConfigResponseValidity() throws {
        let data = try loadMockJSON("RpcProtocolConfigResponse.json")
        let decoded = try decoder.decode(RpcProtocolConfigResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcProtocolConfigResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcQueryRequest variant 0 encoding stability")
    func testRpcQueryRequestVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant0.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 1 encoding stability")
    func testRpcQueryRequestVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant1.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 10 encoding stability")
    func testRpcQueryRequestVariant10EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant10.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 11 encoding stability")
    func testRpcQueryRequestVariant11EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant11.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 12 encoding stability")
    func testRpcQueryRequestVariant12EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant12.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 13 encoding stability")
    func testRpcQueryRequestVariant13EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant13.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 14 encoding stability")
    func testRpcQueryRequestVariant14EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant14.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 15 encoding stability")
    func testRpcQueryRequestVariant15EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant15.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 16 encoding stability")
    func testRpcQueryRequestVariant16EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant16.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 17 encoding stability")
    func testRpcQueryRequestVariant17EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant17.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 18 encoding stability")
    func testRpcQueryRequestVariant18EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant18.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 19 encoding stability")
    func testRpcQueryRequestVariant19EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant19.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 2 encoding stability")
    func testRpcQueryRequestVariant2EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant2.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 20 encoding stability")
    func testRpcQueryRequestVariant20EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant20.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 21 encoding stability")
    func testRpcQueryRequestVariant21EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant21.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 22 encoding stability")
    func testRpcQueryRequestVariant22EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant22.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 23 encoding stability")
    func testRpcQueryRequestVariant23EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant23.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 3 encoding stability")
    func testRpcQueryRequestVariant3EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant3.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 4 encoding stability")
    func testRpcQueryRequestVariant4EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant4.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 5 encoding stability")
    func testRpcQueryRequestVariant5EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant5.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 6 encoding stability")
    func testRpcQueryRequestVariant6EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant6.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 7 encoding stability")
    func testRpcQueryRequestVariant7EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant7.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 8 encoding stability")
    func testRpcQueryRequestVariant8EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant8.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryRequest variant 9 encoding stability")
    func testRpcQueryRequestVariant9EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryRequest_Variant9.json")
        let decoded = try decoder.decode(RpcQueryRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryResponse variant 0 encoding stability")
    func testRpcQueryResponseVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant0.json")
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryResponse.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryResponse variant 1 encoding stability")
    func testRpcQueryResponseVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant1.json")
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryResponse.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryResponse variant 2 encoding stability")
    func testRpcQueryResponseVariant2EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant2.json")
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryResponse.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryResponse variant 3 encoding stability")
    func testRpcQueryResponseVariant3EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant3.json")
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryResponse.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryResponse variant 4 encoding stability")
    func testRpcQueryResponseVariant4EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant4.json")
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryResponse.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcQueryResponse variant 5 encoding stability")
    func testRpcQueryResponseVariant5EncodingStability() throws {
        let data = try loadMockJSON("RpcQueryResponse_Variant5.json")
        let decoded = try decoder.decode(RpcQueryResponse.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcQueryResponse.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcReceiptRequest decoded instance is valid")
    func testRpcReceiptRequestValidity() throws {
        let data = try loadMockJSON("RpcReceiptRequest.json")
        let decoded = try decoder.decode(RpcReceiptRequest.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcReceiptRequest.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcReceiptResponse decoded instance is valid")
    func testRpcReceiptResponseValidity() throws {
        let data = try loadMockJSON("RpcReceiptResponse.json")
        let decoded = try decoder.decode(RpcReceiptResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcReceiptResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcRequestValidationErrorKind variant 0 encoding stability")
    func testRpcRequestValidationErrorKindVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcRequestValidationErrorKind_Variant0.json")
        let decoded = try decoder.decode(RpcRequestValidationErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcRequestValidationErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcRequestValidationErrorKind variant 1 encoding stability")
    func testRpcRequestValidationErrorKindVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcRequestValidationErrorKind_Variant1.json")
        let decoded = try decoder.decode(RpcRequestValidationErrorKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcRequestValidationErrorKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcSendTransactionRequest decoded instance is valid")
    func testRpcSendTransactionRequestValidity() throws {
        let data = try loadMockJSON("RpcSendTransactionRequest.json")
        let decoded = try decoder.decode(RpcSendTransactionRequest.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcSendTransactionRequest.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcSplitStorageInfoResponse decoded instance is valid")
    func testRpcSplitStorageInfoResponseValidity() throws {
        let data = try loadMockJSON("RpcSplitStorageInfoResponse.json")
        let decoded = try decoder.decode(RpcSplitStorageInfoResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcSplitStorageInfoResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 0 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant0.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 1 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant1.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 10 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant10EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant10.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 11 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant11EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant11.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 12 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant12EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant12.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 13 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant13EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant13.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 14 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant14EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant14.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 15 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant15EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant15.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 16 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant16EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant16.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 17 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant17EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant17.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 18 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant18EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant18.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 19 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant19EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant19.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 2 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant2EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant2.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 20 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant20EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant20.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 3 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant3EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant3.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 4 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant4EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant4.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 5 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant5EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant5.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 6 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant6EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant6.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 7 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant7EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant7.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 8 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant8EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant8.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeRequest variant 9 encoding stability")
    func testRpcStateChangesInBlockByTypeRequestVariant9EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeRequest_Variant9.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockByTypeRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockByTypeResponse decoded instance is valid")
    func testRpcStateChangesInBlockByTypeResponseValidity() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockByTypeResponse.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockByTypeResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcStateChangesInBlockByTypeResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcStateChangesInBlockRequest variant 0 encoding stability")
    func testRpcStateChangesInBlockRequestVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockRequest_Variant0.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockRequest variant 1 encoding stability")
    func testRpcStateChangesInBlockRequestVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockRequest_Variant1.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockRequest variant 2 encoding stability")
    func testRpcStateChangesInBlockRequestVariant2EncodingStability() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockRequest_Variant2.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcStateChangesInBlockRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcStateChangesInBlockResponse decoded instance is valid")
    func testRpcStateChangesInBlockResponseValidity() throws {
        let data = try loadMockJSON("RpcStateChangesInBlockResponse.json")
        let decoded = try decoder.decode(RpcStateChangesInBlockResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcStateChangesInBlockResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcStatusResponse decoded instance is valid")
    func testRpcStatusResponseValidity() throws {
        let data = try loadMockJSON("RpcStatusResponse.json")
        let decoded = try decoder.decode(RpcStatusResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcStatusResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcTransactionResponse variant 0 encoding stability")
    func testRpcTransactionResponseVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcTransactionResponse_Variant0.json")
        let decoded = try decoder.decode(RpcTransactionResponse.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcTransactionResponse.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcTransactionResponse variant 1 encoding stability")
    func testRpcTransactionResponseVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcTransactionResponse_Variant1.json")
        let decoded = try decoder.decode(RpcTransactionResponse.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcTransactionResponse.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcTransactionStatusRequest variant 0 encoding stability")
    func testRpcTransactionStatusRequestVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcTransactionStatusRequest_Variant0.json")
        let decoded = try decoder.decode(RpcTransactionStatusRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcTransactionStatusRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcTransactionStatusRequest variant 1 encoding stability")
    func testRpcTransactionStatusRequestVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcTransactionStatusRequest_Variant1.json")
        let decoded = try decoder.decode(RpcTransactionStatusRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcTransactionStatusRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcValidatorRequest variant 0 encoding stability")
    func testRpcValidatorRequestVariant0EncodingStability() throws {
        let data = try loadMockJSON("RpcValidatorRequest_Variant0.json")
        let decoded = try decoder.decode(RpcValidatorRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcValidatorRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcValidatorRequest variant 1 encoding stability")
    func testRpcValidatorRequestVariant1EncodingStability() throws {
        let data = try loadMockJSON("RpcValidatorRequest_Variant1.json")
        let decoded = try decoder.decode(RpcValidatorRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcValidatorRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcValidatorRequest variant 2 encoding stability")
    func testRpcValidatorRequestVariant2EncodingStability() throws {
        let data = try loadMockJSON("RpcValidatorRequest_Variant2.json")
        let decoded = try decoder.decode(RpcValidatorRequest.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(RpcValidatorRequest.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("RpcValidatorResponse decoded instance is valid")
    func testRpcValidatorResponseValidity() throws {
        let data = try loadMockJSON("RpcValidatorResponse.json")
        let decoded = try decoder.decode(RpcValidatorResponse.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcValidatorResponse.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RpcValidatorsOrderedRequest decoded instance is valid")
    func testRpcValidatorsOrderedRequestValidity() throws {
        let data = try loadMockJSON("RpcValidatorsOrderedRequest.json")
        let decoded = try decoder.decode(RpcValidatorsOrderedRequest.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RpcValidatorsOrderedRequest.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RuntimeConfigView decoded instance is valid")
    func testRuntimeConfigViewValidity() throws {
        let data = try loadMockJSON("RuntimeConfigView.json")
        let decoded = try decoder.decode(RuntimeConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RuntimeConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("RuntimeFeesConfigView decoded instance is valid")
    func testRuntimeFeesConfigViewValidity() throws {
        let data = try loadMockJSON("RuntimeFeesConfigView.json")
        let decoded = try decoder.decode(RuntimeFeesConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(RuntimeFeesConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ShardLayout variant 0 encoding stability")
    func testShardLayoutVariant0EncodingStability() throws {
        let data = try loadMockJSON("ShardLayout_Variant0.json")
        let decoded = try decoder.decode(ShardLayout.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ShardLayout.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ShardLayout variant 1 encoding stability")
    func testShardLayoutVariant1EncodingStability() throws {
        let data = try loadMockJSON("ShardLayout_Variant1.json")
        let decoded = try decoder.decode(ShardLayout.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ShardLayout.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ShardLayout variant 2 encoding stability")
    func testShardLayoutVariant2EncodingStability() throws {
        let data = try loadMockJSON("ShardLayout_Variant2.json")
        let decoded = try decoder.decode(ShardLayout.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ShardLayout.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ShardLayoutV0 decoded instance is valid")
    func testShardLayoutV0Validity() throws {
        let data = try loadMockJSON("ShardLayoutV0.json")
        let decoded = try decoder.decode(ShardLayoutV0.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ShardLayoutV0.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ShardLayoutV1 decoded instance is valid")
    func testShardLayoutV1Validity() throws {
        let data = try loadMockJSON("ShardLayoutV1.json")
        let decoded = try decoder.decode(ShardLayoutV1.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ShardLayoutV1.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ShardLayoutV2 decoded instance is valid")
    func testShardLayoutV2Validity() throws {
        let data = try loadMockJSON("ShardLayoutV2.json")
        let decoded = try decoder.decode(ShardLayoutV2.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ShardLayoutV2.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ShardUId decoded instance is valid")
    func testShardUIdValidity() throws {
        let data = try loadMockJSON("ShardUId.json")
        let decoded = try decoder.decode(ShardUId.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ShardUId.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("SignedDelegateAction decoded instance is valid")
    func testSignedDelegateActionValidity() throws {
        let data = try loadMockJSON("SignedDelegateAction.json")
        let decoded = try decoder.decode(SignedDelegateAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(SignedDelegateAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("SignedTransactionView decoded instance is valid")
    func testSignedTransactionViewValidity() throws {
        let data = try loadMockJSON("SignedTransactionView.json")
        let decoded = try decoder.decode(SignedTransactionView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(SignedTransactionView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("SlashedValidator decoded instance is valid")
    func testSlashedValidatorValidity() throws {
        let data = try loadMockJSON("SlashedValidator.json")
        let decoded = try decoder.decode(SlashedValidator.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(SlashedValidator.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("StakeAction decoded instance is valid")
    func testStakeActionValidity() throws {
        let data = try loadMockJSON("StakeAction.json")
        let decoded = try decoder.decode(StakeAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(StakeAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("StateChangeCauseView variant 0 encoding stability")
    func testStateChangeCauseViewVariant0EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant0.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeCauseView variant 1 encoding stability")
    func testStateChangeCauseViewVariant1EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant1.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeCauseView variant 10 encoding stability")
    func testStateChangeCauseViewVariant10EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant10.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeCauseView variant 2 encoding stability")
    func testStateChangeCauseViewVariant2EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant2.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeCauseView variant 3 encoding stability")
    func testStateChangeCauseViewVariant3EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant3.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeCauseView variant 4 encoding stability")
    func testStateChangeCauseViewVariant4EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant4.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeCauseView variant 5 encoding stability")
    func testStateChangeCauseViewVariant5EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant5.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeCauseView variant 6 encoding stability")
    func testStateChangeCauseViewVariant6EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant6.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeCauseView variant 7 encoding stability")
    func testStateChangeCauseViewVariant7EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant7.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeCauseView variant 8 encoding stability")
    func testStateChangeCauseViewVariant8EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant8.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeCauseView variant 9 encoding stability")
    func testStateChangeCauseViewVariant9EncodingStability() throws {
        let data = try loadMockJSON("StateChangeCauseView_Variant9.json")
        let decoded = try decoder.decode(StateChangeCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeKindView variant 0 encoding stability")
    func testStateChangeKindViewVariant0EncodingStability() throws {
        let data = try loadMockJSON("StateChangeKindView_Variant0.json")
        let decoded = try decoder.decode(StateChangeKindView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeKindView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeKindView variant 1 encoding stability")
    func testStateChangeKindViewVariant1EncodingStability() throws {
        let data = try loadMockJSON("StateChangeKindView_Variant1.json")
        let decoded = try decoder.decode(StateChangeKindView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeKindView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeKindView variant 2 encoding stability")
    func testStateChangeKindViewVariant2EncodingStability() throws {
        let data = try loadMockJSON("StateChangeKindView_Variant2.json")
        let decoded = try decoder.decode(StateChangeKindView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeKindView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeKindView variant 3 encoding stability")
    func testStateChangeKindViewVariant3EncodingStability() throws {
        let data = try loadMockJSON("StateChangeKindView_Variant3.json")
        let decoded = try decoder.decode(StateChangeKindView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeKindView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 0 encoding stability")
    func testStateChangeWithCauseViewVariant0EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant0.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 1 encoding stability")
    func testStateChangeWithCauseViewVariant1EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant1.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 10 encoding stability")
    func testStateChangeWithCauseViewVariant10EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant10.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 2 encoding stability")
    func testStateChangeWithCauseViewVariant2EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant2.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 3 encoding stability")
    func testStateChangeWithCauseViewVariant3EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant3.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 4 encoding stability")
    func testStateChangeWithCauseViewVariant4EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant4.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 5 encoding stability")
    func testStateChangeWithCauseViewVariant5EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant5.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 6 encoding stability")
    func testStateChangeWithCauseViewVariant6EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant6.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 7 encoding stability")
    func testStateChangeWithCauseViewVariant7EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant7.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 8 encoding stability")
    func testStateChangeWithCauseViewVariant8EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant8.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateChangeWithCauseView variant 9 encoding stability")
    func testStateChangeWithCauseViewVariant9EncodingStability() throws {
        let data = try loadMockJSON("StateChangeWithCauseView_Variant9.json")
        let decoded = try decoder.decode(StateChangeWithCauseView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StateChangeWithCauseView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StateItem decoded instance is valid")
    func testStateItemValidity() throws {
        let data = try loadMockJSON("StateItem.json")
        let decoded = try decoder.decode(StateItem.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(StateItem.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("StateSyncConfig decoded instance is valid")
    func testStateSyncConfigValidity() throws {
        let data = try loadMockJSON("StateSyncConfig.json")
        let decoded = try decoder.decode(StateSyncConfig.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(StateSyncConfig.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("StatusSyncInfo decoded instance is valid")
    func testStatusSyncInfoValidity() throws {
        let data = try loadMockJSON("StatusSyncInfo.json")
        let decoded = try decoder.decode(StatusSyncInfo.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(StatusSyncInfo.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("StorageError variant 0 encoding stability")
    func testStorageErrorVariant0EncodingStability() throws {
        let data = try loadMockJSON("StorageError_Variant0.json")
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StorageError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StorageError variant 1 encoding stability")
    func testStorageErrorVariant1EncodingStability() throws {
        let data = try loadMockJSON("StorageError_Variant1.json")
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StorageError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StorageError variant 2 encoding stability")
    func testStorageErrorVariant2EncodingStability() throws {
        let data = try loadMockJSON("StorageError_Variant2.json")
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StorageError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StorageError variant 3 encoding stability")
    func testStorageErrorVariant3EncodingStability() throws {
        let data = try loadMockJSON("StorageError_Variant3.json")
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StorageError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StorageError variant 4 encoding stability")
    func testStorageErrorVariant4EncodingStability() throws {
        let data = try loadMockJSON("StorageError_Variant4.json")
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StorageError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StorageError variant 5 encoding stability")
    func testStorageErrorVariant5EncodingStability() throws {
        let data = try loadMockJSON("StorageError_Variant5.json")
        let decoded = try decoder.decode(StorageError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(StorageError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("StorageUsageConfigView decoded instance is valid")
    func testStorageUsageConfigViewValidity() throws {
        let data = try loadMockJSON("StorageUsageConfigView.json")
        let decoded = try decoder.decode(StorageUsageConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(StorageUsageConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("SyncConcurrency decoded instance is valid")
    func testSyncConcurrencyValidity() throws {
        let data = try loadMockJSON("SyncConcurrency.json")
        let decoded = try decoder.decode(SyncConcurrency.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(SyncConcurrency.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("SyncConfig variant 0 encoding stability")
    func testSyncConfigVariant0EncodingStability() throws {
        let data = try loadMockJSON("SyncConfig_Variant0.json")
        let decoded = try decoder.decode(SyncConfig.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(SyncConfig.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("SyncConfig variant 1 encoding stability")
    func testSyncConfigVariant1EncodingStability() throws {
        let data = try loadMockJSON("SyncConfig_Variant1.json")
        let decoded = try decoder.decode(SyncConfig.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(SyncConfig.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("Tier1ProxyView decoded instance is valid")
    func testTier1ProxyViewValidity() throws {
        let data = try loadMockJSON("Tier1ProxyView.json")
        let decoded = try decoder.decode(Tier1ProxyView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(Tier1ProxyView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("TrackedShardsConfig variant 0 encoding stability")
    func testTrackedShardsConfigVariant0EncodingStability() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant0.json")
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TrackedShardsConfig.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TrackedShardsConfig variant 1 encoding stability")
    func testTrackedShardsConfigVariant1EncodingStability() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant1.json")
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TrackedShardsConfig.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TrackedShardsConfig variant 2 encoding stability")
    func testTrackedShardsConfigVariant2EncodingStability() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant2.json")
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TrackedShardsConfig.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TrackedShardsConfig variant 3 encoding stability")
    func testTrackedShardsConfigVariant3EncodingStability() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant3.json")
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TrackedShardsConfig.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TrackedShardsConfig variant 4 encoding stability")
    func testTrackedShardsConfigVariant4EncodingStability() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant4.json")
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TrackedShardsConfig.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TrackedShardsConfig variant 5 encoding stability")
    func testTrackedShardsConfigVariant5EncodingStability() throws {
        let data = try loadMockJSON("TrackedShardsConfig_Variant5.json")
        let decoded = try decoder.decode(TrackedShardsConfig.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TrackedShardsConfig.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TransferAction decoded instance is valid")
    func testTransferActionValidity() throws {
        let data = try loadMockJSON("TransferAction.json")
        let decoded = try decoder.decode(TransferAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(TransferAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("TxExecutionError variant 0 encoding stability")
    func testTxExecutionErrorVariant0EncodingStability() throws {
        let data = try loadMockJSON("TxExecutionError_Variant0.json")
        let decoded = try decoder.decode(TxExecutionError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TxExecutionError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TxExecutionError variant 1 encoding stability")
    func testTxExecutionErrorVariant1EncodingStability() throws {
        let data = try loadMockJSON("TxExecutionError_Variant1.json")
        let decoded = try decoder.decode(TxExecutionError.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TxExecutionError.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TxExecutionStatus variant 0 encoding stability")
    func testTxExecutionStatusVariant0EncodingStability() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant0.json")
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TxExecutionStatus.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TxExecutionStatus variant 1 encoding stability")
    func testTxExecutionStatusVariant1EncodingStability() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant1.json")
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TxExecutionStatus.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TxExecutionStatus variant 2 encoding stability")
    func testTxExecutionStatusVariant2EncodingStability() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant2.json")
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TxExecutionStatus.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TxExecutionStatus variant 3 encoding stability")
    func testTxExecutionStatusVariant3EncodingStability() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant3.json")
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TxExecutionStatus.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TxExecutionStatus variant 4 encoding stability")
    func testTxExecutionStatusVariant4EncodingStability() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant4.json")
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TxExecutionStatus.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("TxExecutionStatus variant 5 encoding stability")
    func testTxExecutionStatusVariant5EncodingStability() throws {
        let data = try loadMockJSON("TxExecutionStatus_Variant5.json")
        let decoded = try decoder.decode(TxExecutionStatus.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(TxExecutionStatus.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("UseGlobalContractAction decoded instance is valid")
    func testUseGlobalContractActionValidity() throws {
        let data = try loadMockJSON("UseGlobalContractAction.json")
        let decoded = try decoder.decode(UseGlobalContractAction.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(UseGlobalContractAction.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("VMConfigView decoded instance is valid")
    func testVMConfigViewValidity() throws {
        let data = try loadMockJSON("VMConfigView.json")
        let decoded = try decoder.decode(VMConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(VMConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("VMKind variant 0 encoding stability")
    func testVMKindVariant0EncodingStability() throws {
        let data = try loadMockJSON("VMKind_Variant0.json")
        let decoded = try decoder.decode(VMKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(VMKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("VMKind variant 1 encoding stability")
    func testVMKindVariant1EncodingStability() throws {
        let data = try loadMockJSON("VMKind_Variant1.json")
        let decoded = try decoder.decode(VMKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(VMKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("VMKind variant 2 encoding stability")
    func testVMKindVariant2EncodingStability() throws {
        let data = try loadMockJSON("VMKind_Variant2.json")
        let decoded = try decoder.decode(VMKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(VMKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("VMKind variant 3 encoding stability")
    func testVMKindVariant3EncodingStability() throws {
        let data = try loadMockJSON("VMKind_Variant3.json")
        let decoded = try decoder.decode(VMKind.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(VMKind.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ValidatorInfo decoded instance is valid")
    func testValidatorInfoValidity() throws {
        let data = try loadMockJSON("ValidatorInfo.json")
        let decoded = try decoder.decode(ValidatorInfo.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ValidatorInfo.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ValidatorKickoutReason variant 0 encoding stability")
    func testValidatorKickoutReasonVariant0EncodingStability() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant0.json")
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ValidatorKickoutReason.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ValidatorKickoutReason variant 1 encoding stability")
    func testValidatorKickoutReasonVariant1EncodingStability() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant1.json")
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ValidatorKickoutReason.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ValidatorKickoutReason variant 2 encoding stability")
    func testValidatorKickoutReasonVariant2EncodingStability() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant2.json")
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ValidatorKickoutReason.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ValidatorKickoutReason variant 3 encoding stability")
    func testValidatorKickoutReasonVariant3EncodingStability() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant3.json")
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ValidatorKickoutReason.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ValidatorKickoutReason variant 4 encoding stability")
    func testValidatorKickoutReasonVariant4EncodingStability() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant4.json")
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ValidatorKickoutReason.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ValidatorKickoutReason variant 5 encoding stability")
    func testValidatorKickoutReasonVariant5EncodingStability() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant5.json")
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ValidatorKickoutReason.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ValidatorKickoutReason variant 6 encoding stability")
    func testValidatorKickoutReasonVariant6EncodingStability() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant6.json")
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ValidatorKickoutReason.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ValidatorKickoutReason variant 7 encoding stability")
    func testValidatorKickoutReasonVariant7EncodingStability() throws {
        let data = try loadMockJSON("ValidatorKickoutReason_Variant7.json")
        let decoded = try decoder.decode(ValidatorKickoutReason.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ValidatorKickoutReason.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ValidatorKickoutView decoded instance is valid")
    func testValidatorKickoutViewValidity() throws {
        let data = try loadMockJSON("ValidatorKickoutView.json")
        let decoded = try decoder.decode(ValidatorKickoutView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ValidatorKickoutView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ValidatorStakeView variant 0 encoding stability")
    func testValidatorStakeViewVariant0EncodingStability() throws {
        let data = try loadMockJSON("ValidatorStakeView_Variant0.json")
        let decoded = try decoder.decode(ValidatorStakeView.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(ValidatorStakeView.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("ValidatorStakeViewV1 decoded instance is valid")
    func testValidatorStakeViewV1Validity() throws {
        let data = try loadMockJSON("ValidatorStakeViewV1.json")
        let decoded = try decoder.decode(ValidatorStakeViewV1.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ValidatorStakeViewV1.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("Version decoded instance is valid")
    func testVersionValidity() throws {
        let data = try loadMockJSON("Version.json")
        let decoded = try decoder.decode(Version.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(Version.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("ViewStateResult decoded instance is valid")
    func testViewStateResultValidity() throws {
        let data = try loadMockJSON("ViewStateResult.json")
        let decoded = try decoder.decode(ViewStateResult.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(ViewStateResult.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
    @Test("WasmTrap variant 0 encoding stability")
    func testWasmTrapVariant0EncodingStability() throws {
        let data = try loadMockJSON("WasmTrap_Variant0.json")
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(WasmTrap.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("WasmTrap variant 1 encoding stability")
    func testWasmTrapVariant1EncodingStability() throws {
        let data = try loadMockJSON("WasmTrap_Variant1.json")
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(WasmTrap.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("WasmTrap variant 2 encoding stability")
    func testWasmTrapVariant2EncodingStability() throws {
        let data = try loadMockJSON("WasmTrap_Variant2.json")
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(WasmTrap.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("WasmTrap variant 3 encoding stability")
    func testWasmTrapVariant3EncodingStability() throws {
        let data = try loadMockJSON("WasmTrap_Variant3.json")
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(WasmTrap.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("WasmTrap variant 4 encoding stability")
    func testWasmTrapVariant4EncodingStability() throws {
        let data = try loadMockJSON("WasmTrap_Variant4.json")
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(WasmTrap.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("WasmTrap variant 5 encoding stability")
    func testWasmTrapVariant5EncodingStability() throws {
        let data = try loadMockJSON("WasmTrap_Variant5.json")
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(WasmTrap.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("WasmTrap variant 6 encoding stability")
    func testWasmTrapVariant6EncodingStability() throws {
        let data = try loadMockJSON("WasmTrap_Variant6.json")
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(WasmTrap.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("WasmTrap variant 7 encoding stability")
    func testWasmTrapVariant7EncodingStability() throws {
        let data = try loadMockJSON("WasmTrap_Variant7.json")
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(WasmTrap.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("WasmTrap variant 8 encoding stability")
    func testWasmTrapVariant8EncodingStability() throws {
        let data = try loadMockJSON("WasmTrap_Variant8.json")
        let decoded = try decoder.decode(WasmTrap.self, from: data)
        
        // Multiple encoding cycles should produce consistent results
        let encoded1 = try encoder.encode(decoded)
        let decoded2 = try decoder.decode(WasmTrap.self, from: encoded1)
        let encoded2 = try encoder.encode(decoded2)
        
        #expect(encoded1.count > 0)
        #expect(encoded2.count > 0)
    }
    
    @Test("WitnessConfigView decoded instance is valid")
    func testWitnessConfigViewValidity() throws {
        let data = try loadMockJSON("WitnessConfigView.json")
        let decoded = try decoder.decode(WitnessConfigView.self, from: data)
        
        // Verify the decoded instance is valid by re-encoding
        let encoded = try encoder.encode(decoded)
        #expect(encoded.count > 0)
        
        // Verify round-trip
        let redecoded = try decoder.decode(WitnessConfigView.self, from: encoded)
        let reencoded = try encoder.encode(redecoded)
        #expect(reencoded.count > 0)
    }
    
}
