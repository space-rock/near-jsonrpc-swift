//
// ClientTests.swift
// Auto-generated tests for NEAR JSON-RPC Client
//
// DO NOT EDIT: This file is auto-generated by generate_all_tests.py
//

import Testing
import Foundation
@testable import NearJsonRpcClient
@testable import NearJsonRpcTypes

@Suite("Client Method Tests")
struct ClientTests {
    
    let decoder: JSONDecoder
    
    init() {
        decoder = JSONDecoder()
        decoder.keyDecodingStrategy = .convertFromSnakeCase
    }
    
    /// Load mock JSON data from file
    func loadMockJSON(_ filename: String) throws -> Data {
        let testBundle = Bundle.module
        guard let url = testBundle.url(forResource: filename.replacingOccurrences(of: ".json", with: ""), withExtension: "json", subdirectory: "Mock") else {
            throw NSError(domain: "TestError", code: 1, userInfo: [NSLocalizedDescriptionKey: "Mock file not found: \(filename)"])
        }
        return try Data(contentsOf: url)
    }
    
    @Test("EXPERIMENTAL_changes request and success response types are valid")
    func testEXPERIMENTALChangesRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALChanges.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALChanges.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_changes request and error response types are valid")
    func testEXPERIMENTALChangesRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALChanges.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALChanges.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_changes_in_block request and success response types are valid")
    func testEXPERIMENTALChangesInBlockRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALChangesInBlock.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALChangesInBlock.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_changes_in_block request and error response types are valid")
    func testEXPERIMENTALChangesInBlockRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALChangesInBlock.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALChangesInBlock.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_congestion_level request and success response types are valid")
    func testEXPERIMENTALCongestionLevelRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALCongestionLevel.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALCongestionLevel.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcCongestionLevelResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcCongestionLevelResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_congestion_level request and error response types are valid")
    func testEXPERIMENTALCongestionLevelRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALCongestionLevel.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALCongestionLevel.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcCongestionLevelResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcCongestionLevelResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_genesis_config request and success response types are valid")
    func testEXPERIMENTALGenesisConfigRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALGenesisConfig.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALGenesisConfig.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForGenesisConfigAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForGenesisConfigAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_genesis_config request and error response types are valid")
    func testEXPERIMENTALGenesisConfigRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALGenesisConfig.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALGenesisConfig.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForGenesisConfigAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForGenesisConfigAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_light_client_block_proof request and success response types are valid")
    func testEXPERIMENTALLightClientBlockProofRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALLightClientBlockProof.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALLightClientBlockProof.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_light_client_block_proof request and error response types are valid")
    func testEXPERIMENTALLightClientBlockProofRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALLightClientBlockProof.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALLightClientBlockProof.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientBlockProofResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_light_client_proof request and success response types are valid")
    func testEXPERIMENTALLightClientProofRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALLightClientProof.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALLightClientProof.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_light_client_proof request and error response types are valid")
    func testEXPERIMENTALLightClientProofRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALLightClientProof.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALLightClientProof.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_maintenance_windows request and success response types are valid")
    func testEXPERIMENTALMaintenanceWindowsRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALMaintenanceWindows.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALMaintenanceWindows.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForArrayOfRangeOfUint64AndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForArrayOfRangeOfUint64AndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_maintenance_windows request and error response types are valid")
    func testEXPERIMENTALMaintenanceWindowsRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALMaintenanceWindows.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALMaintenanceWindows.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForArrayOfRangeOfUint64AndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForArrayOfRangeOfUint64AndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_protocol_config request and success response types are valid")
    func testEXPERIMENTALProtocolConfigRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALProtocolConfig.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALProtocolConfig.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcProtocolConfigResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcProtocolConfigResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_protocol_config request and error response types are valid")
    func testEXPERIMENTALProtocolConfigRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALProtocolConfig.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALProtocolConfig.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcProtocolConfigResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcProtocolConfigResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_receipt request and success response types are valid")
    func testEXPERIMENTALReceiptRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALReceipt.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALReceipt.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcReceiptResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcReceiptResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_receipt request and error response types are valid")
    func testEXPERIMENTALReceiptRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALReceipt.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALReceipt.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcReceiptResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcReceiptResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_split_storage_info request and success response types are valid")
    func testEXPERIMENTALSplitStorageInfoRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALSplitStorageInfo.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALSplitStorageInfo.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_split_storage_info request and error response types are valid")
    func testEXPERIMENTALSplitStorageInfoRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALSplitStorageInfo.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALSplitStorageInfo.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcSplitStorageInfoResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_tx_status request and success response types are valid")
    func testEXPERIMENTALTxStatusRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALTxStatus.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALTxStatus.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcTransactionResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_tx_status request and error response types are valid")
    func testEXPERIMENTALTxStatusRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALTxStatus.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALTxStatus.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcTransactionResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_validators_ordered request and success response types are valid")
    func testEXPERIMENTALValidatorsOrderedRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALValidatorsOrdered.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALValidatorsOrdered.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError.self, from: responseData)
    }
    
    @Test("EXPERIMENTAL_validators_ordered request and error response types are valid")
    func testEXPERIMENTALValidatorsOrderedRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForEXPERIMENTALValidatorsOrdered.json")
        _ = try decoder.decode(JsonRpcRequestForEXPERIMENTALValidatorsOrdered.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForArrayOfValidatorStakeViewAndRpcError.self, from: responseData)
    }
    
    @Test("block request and success response types are valid")
    func testBlockRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForBlock.json")
        _ = try decoder.decode(JsonRpcRequestForBlock.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcBlockResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcBlockResponseAndRpcError.self, from: responseData)
    }
    
    @Test("block request and error response types are valid")
    func testBlockRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForBlock.json")
        _ = try decoder.decode(JsonRpcRequestForBlock.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcBlockResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcBlockResponseAndRpcError.self, from: responseData)
    }
    
    @Test("block_effects request and success response types are valid")
    func testBlockEffectsRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForBlockEffects.json")
        _ = try decoder.decode(JsonRpcRequestForBlockEffects.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError.self, from: responseData)
    }
    
    @Test("block_effects request and error response types are valid")
    func testBlockEffectsRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForBlockEffects.json")
        _ = try decoder.decode(JsonRpcRequestForBlockEffects.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockByTypeResponseAndRpcError.self, from: responseData)
    }
    
    @Test("broadcast_tx_async request and success response types are valid")
    func testBroadcastTxAsyncRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForBroadcastTxAsync.json")
        _ = try decoder.decode(JsonRpcRequestForBroadcastTxAsync.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForCryptoHashAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForCryptoHashAndRpcError.self, from: responseData)
    }
    
    @Test("broadcast_tx_async request and error response types are valid")
    func testBroadcastTxAsyncRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForBroadcastTxAsync.json")
        _ = try decoder.decode(JsonRpcRequestForBroadcastTxAsync.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForCryptoHashAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForCryptoHashAndRpcError.self, from: responseData)
    }
    
    @Test("broadcast_tx_commit request and success response types are valid")
    func testBroadcastTxCommitRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForBroadcastTxCommit.json")
        _ = try decoder.decode(JsonRpcRequestForBroadcastTxCommit.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcTransactionResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: responseData)
    }
    
    @Test("broadcast_tx_commit request and error response types are valid")
    func testBroadcastTxCommitRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForBroadcastTxCommit.json")
        _ = try decoder.decode(JsonRpcRequestForBroadcastTxCommit.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcTransactionResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: responseData)
    }
    
    @Test("changes request and success response types are valid")
    func testChangesRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForChanges.json")
        _ = try decoder.decode(JsonRpcRequestForChanges.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError.self, from: responseData)
    }
    
    @Test("changes request and error response types are valid")
    func testChangesRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForChanges.json")
        _ = try decoder.decode(JsonRpcRequestForChanges.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcStateChangesInBlockResponseAndRpcError.self, from: responseData)
    }
    
    @Test("chunk request and success response types are valid")
    func testChunkRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForChunk.json")
        _ = try decoder.decode(JsonRpcRequestForChunk.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcChunkResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcChunkResponseAndRpcError.self, from: responseData)
    }
    
    @Test("chunk request and error response types are valid")
    func testChunkRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForChunk.json")
        _ = try decoder.decode(JsonRpcRequestForChunk.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcChunkResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcChunkResponseAndRpcError.self, from: responseData)
    }
    
    @Test("client_config request and success response types are valid")
    func testClientConfigRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForClientConfig.json")
        _ = try decoder.decode(JsonRpcRequestForClientConfig.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcClientConfigResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcClientConfigResponseAndRpcError.self, from: responseData)
    }
    
    @Test("client_config request and error response types are valid")
    func testClientConfigRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForClientConfig.json")
        _ = try decoder.decode(JsonRpcRequestForClientConfig.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcClientConfigResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcClientConfigResponseAndRpcError.self, from: responseData)
    }
    
    @Test("gas_price request and success response types are valid")
    func testGasPriceRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForGasPrice.json")
        _ = try decoder.decode(JsonRpcRequestForGasPrice.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcGasPriceResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcGasPriceResponseAndRpcError.self, from: responseData)
    }
    
    @Test("gas_price request and error response types are valid")
    func testGasPriceRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForGasPrice.json")
        _ = try decoder.decode(JsonRpcRequestForGasPrice.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcGasPriceResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcGasPriceResponseAndRpcError.self, from: responseData)
    }
    
    @Test("genesis_config request and success response types are valid")
    func testGenesisConfigRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForGenesisConfig.json")
        _ = try decoder.decode(JsonRpcRequestForGenesisConfig.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForGenesisConfigAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForGenesisConfigAndRpcError.self, from: responseData)
    }
    
    @Test("genesis_config request and error response types are valid")
    func testGenesisConfigRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForGenesisConfig.json")
        _ = try decoder.decode(JsonRpcRequestForGenesisConfig.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForGenesisConfigAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForGenesisConfigAndRpcError.self, from: responseData)
    }
    
    @Test("health request and success response types are valid")
    func testHealthRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForHealth.json")
        _ = try decoder.decode(JsonRpcRequestForHealth.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForNullableRpcHealthResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForNullableRpcHealthResponseAndRpcError.self, from: responseData)
    }
    
    @Test("health request and error response types are valid")
    func testHealthRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForHealth.json")
        _ = try decoder.decode(JsonRpcRequestForHealth.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForNullableRpcHealthResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForNullableRpcHealthResponseAndRpcError.self, from: responseData)
    }
    
    @Test("light_client_proof request and success response types are valid")
    func testLightClientProofRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForLightClientProof.json")
        _ = try decoder.decode(JsonRpcRequestForLightClientProof.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError.self, from: responseData)
    }
    
    @Test("light_client_proof request and error response types are valid")
    func testLightClientProofRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForLightClientProof.json")
        _ = try decoder.decode(JsonRpcRequestForLightClientProof.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientExecutionProofResponseAndRpcError.self, from: responseData)
    }
    
    @Test("maintenance_windows request and success response types are valid")
    func testMaintenanceWindowsRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForMaintenanceWindows.json")
        _ = try decoder.decode(JsonRpcRequestForMaintenanceWindows.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForArrayOfRangeOfUint64AndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForArrayOfRangeOfUint64AndRpcError.self, from: responseData)
    }
    
    @Test("maintenance_windows request and error response types are valid")
    func testMaintenanceWindowsRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForMaintenanceWindows.json")
        _ = try decoder.decode(JsonRpcRequestForMaintenanceWindows.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForArrayOfRangeOfUint64AndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForArrayOfRangeOfUint64AndRpcError.self, from: responseData)
    }
    
    @Test("network_info request and success response types are valid")
    func testNetworkInfoRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForNetworkInfo.json")
        _ = try decoder.decode(JsonRpcRequestForNetworkInfo.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcNetworkInfoResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcNetworkInfoResponseAndRpcError.self, from: responseData)
    }
    
    @Test("network_info request and error response types are valid")
    func testNetworkInfoRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForNetworkInfo.json")
        _ = try decoder.decode(JsonRpcRequestForNetworkInfo.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcNetworkInfoResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcNetworkInfoResponseAndRpcError.self, from: responseData)
    }
    
    @Test("next_light_client_block request and success response types are valid")
    func testNextLightClientBlockRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForNextLightClientBlock.json")
        _ = try decoder.decode(JsonRpcRequestForNextLightClientBlock.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError.self, from: responseData)
    }
    
    @Test("next_light_client_block request and error response types are valid")
    func testNextLightClientBlockRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForNextLightClientBlock.json")
        _ = try decoder.decode(JsonRpcRequestForNextLightClientBlock.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcLightClientNextBlockResponseAndRpcError.self, from: responseData)
    }
    
    @Test("query request and success response types are valid")
    func testQueryRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForQuery.json")
        _ = try decoder.decode(JsonRpcRequestForQuery.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcQueryResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcQueryResponseAndRpcError.self, from: responseData)
    }
    
    @Test("query request and error response types are valid")
    func testQueryRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForQuery.json")
        _ = try decoder.decode(JsonRpcRequestForQuery.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcQueryResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcQueryResponseAndRpcError.self, from: responseData)
    }
    
    @Test("send_tx request and success response types are valid")
    func testSendTxRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForSendTx.json")
        _ = try decoder.decode(JsonRpcRequestForSendTx.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcTransactionResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: responseData)
    }
    
    @Test("send_tx request and error response types are valid")
    func testSendTxRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForSendTx.json")
        _ = try decoder.decode(JsonRpcRequestForSendTx.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcTransactionResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: responseData)
    }
    
    @Test("status request and success response types are valid")
    func testStatusRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForStatus.json")
        _ = try decoder.decode(JsonRpcRequestForStatus.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcStatusResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcStatusResponseAndRpcError.self, from: responseData)
    }
    
    @Test("status request and error response types are valid")
    func testStatusRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForStatus.json")
        _ = try decoder.decode(JsonRpcRequestForStatus.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcStatusResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcStatusResponseAndRpcError.self, from: responseData)
    }
    
    @Test("tx request and success response types are valid")
    func testTxRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForTx.json")
        _ = try decoder.decode(JsonRpcRequestForTx.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcTransactionResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: responseData)
    }
    
    @Test("tx request and error response types are valid")
    func testTxRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForTx.json")
        _ = try decoder.decode(JsonRpcRequestForTx.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcTransactionResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcTransactionResponseAndRpcError.self, from: responseData)
    }
    
    @Test("validators request and success response types are valid")
    func testValidatorsRequestAndSuccessResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForValidators.json")
        _ = try decoder.decode(JsonRpcRequestForValidators.self, from: requestData)
        
        // Test success response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcValidatorResponseAndRpcError_Success.json")
        _ = try decoder.decode(JsonRpcResponseForRpcValidatorResponseAndRpcError.self, from: responseData)
    }
    
    @Test("validators request and error response types are valid")
    func testValidatorsRequestAndErrorResponse() throws {
        // Test request type decoding
        let requestData = try loadMockJSON("JsonRpcRequestForValidators.json")
        _ = try decoder.decode(JsonRpcRequestForValidators.self, from: requestData)
        
        // Test error response type decoding
        let responseData = try loadMockJSON("JsonRpcResponseForRpcValidatorResponseAndRpcError_Error.json")
        _ = try decoder.decode(JsonRpcResponseForRpcValidatorResponseAndRpcError.self, from: responseData)
    }
    
}
